#pragma once /*Avoids redefinition of matfunctions in the translation unit*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iIjJ  =  Id_ij*Id_IJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_ijII(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[5]   =  1.;
       C[10]  =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[10]  =  1.;
       C[20]  =  1.;
       C[30]  =  1.;
       C[40]  =  1.;
       C[50]  =  1.;
       C[60]  =  1.;
       C[70]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iIjJ  =  Id_iI*Id_jJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_iIjJ(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[3]   =  1.;
       C[12]  =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[4]   =  1.;
       C[8]   =  1.;
       C[36]  =  1.;
       C[40]  =  1.;
       C[44]  =  1.;
       C[72]  =  1.;
       C[76]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iJiJ  =  Id_iJ*Id_jI
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_iJjI(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[6]   =  1.;
       C[9]   =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[12]  =  1.;
       C[24]  =  1.;
       C[28]  =  1.;
       C[40]  =  1.;
       C[52]  =  1.;
       C[56]  =  1.;
       C[68]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between fourth order identity matrix and a second 
 * order tensor:  C_iIjJ  =  Id_{ij}Id_{pP}*Fqp*E_jpq*E_JPQ        
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_IdentityMatrix_42_(mwSize dim, const double *F, double *C) 
{
  C[4]  =   F[8];
  C[5]  =   -F[7];
  C[7]  =   -F[5];
  C[8]  =   F[4];
  C[12] =  -F[8];
  C[14] =  F[6];
  C[15] =  F[5];
  C[17] =  -F[3];
  C[21] =  F[7];
  C[22] =  -F[6];
  C[24] =  -F[4];
  C[25] =  F[3];
  C[28] =  -F[8];
  C[29] =  F[7];
  C[34] =  F[2];
  C[35] =  -F[1];
  C[36] =  F[8];
  C[38] =  -F[6];
  C[42] =  -F[2];
  C[44] =  F[0];
  C[45] =  -F[7];
  C[46] =  F[6];
  C[51] =  F[1];
  C[52] =  -F[0];
  C[55] =  F[5];
  C[56] =  -F[4];
  C[58] =  -F[2];
  C[59] =  F[1];
  C[63] =  -F[5];
  C[65] =  F[3];
  C[66] =  F[2];
  C[68] =  -F[0];
  C[72] =  F[4];
  C[73] =  -F[3];
  C[75] =  -F[1];
  C[76] =  F[0];
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between two vectors:
 * C_IJ  =  A_I*B_J     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_11_(mwSize dim, const double *A, const double *B, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[0]*B[1];
       C[3]   =  A[1]*B[1];
    }
    else if (dim==3){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[0]*B[1];
       C[4]   =  A[1]*B[1];
       C[5]   =  A[2]*B[1];
       C[6]   =  A[0]*B[2];
       C[7]   =  A[1]*B[2];
       C[8]   =  A[2]*B[2];    
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between two second order tensors:
 * C_iIjJ  =  A_iI*B_jJ     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_22_(mwSize dim, const double *A, const double *B, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[3]*B[0];
       C[4]   =  A[0]*B[1];
       C[5]   =  A[1]*B[1];
       C[6]   =  A[2]*B[1];
       C[7]   =  A[3]*B[1];
       C[8]   =  A[0]*B[2];
       C[9]   =  A[1]*B[2];
       C[10]  =  A[2]*B[2];
       C[11]  =  A[3]*B[2];
       C[12]  =  A[0]*B[3];
       C[13]  =  A[1]*B[3];
       C[14]  =  A[2]*B[3];
       C[15]  =  A[3]*B[3];      
    }
    else if (dim==3){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[3]*B[0];
       C[4]   =  A[4]*B[0];
       C[5]   =  A[5]*B[0];
       C[6]   =  A[6]*B[0];
       C[7]   =  A[7]*B[0];
       C[8]   =  A[8]*B[0];
       C[9]   =  A[0]*B[1];
       C[10]  =  A[1]*B[1];
       C[11]  =  A[2]*B[1];
       C[12]  =  A[3]*B[1];
       C[13]  =  A[4]*B[1];
       C[14]  =  A[5]*B[1];
       C[15]  =  A[6]*B[1];
       C[16]  =  A[7]*B[1];
       C[17]  =  A[8]*B[1];
       C[18]  =  A[0]*B[2];
       C[19]  =  A[1]*B[2];
       C[20]  =  A[2]*B[2];
       C[21]  =  A[3]*B[2];
       C[22]  =  A[4]*B[2];
       C[23]  =  A[5]*B[2];
       C[24]  =  A[6]*B[2];
       C[25]  =  A[7]*B[2];
       C[26]  =  A[8]*B[2];
       C[27]  =  A[0]*B[3];
       C[28]  =  A[1]*B[3];
       C[29]  =  A[2]*B[3];
       C[30]  =  A[3]*B[3];
       C[31]  =  A[4]*B[3];
       C[32]  =  A[5]*B[3];
       C[33]  =  A[6]*B[3];
       C[34]  =  A[7]*B[3];
       C[35]  =  A[8]*B[3];
       C[36]  =  A[0]*B[4];
       C[37]  =  A[1]*B[4];
       C[38]  =  A[2]*B[4];
       C[39]  =  A[3]*B[4];
       C[40]  =  A[4]*B[4];
       C[41]  =  A[5]*B[4];
       C[42]  =  A[6]*B[4];
       C[43]  =  A[7]*B[4];
       C[44]  =  A[8]*B[4];
       C[45]  =  A[0]*B[5];
       C[46]  =  A[1]*B[5];
       C[47]  =  A[2]*B[5];
       C[48]  =  A[3]*B[5];
       C[49]  =  A[4]*B[5];
       C[50]  =  A[5]*B[5];
       C[51]  =  A[6]*B[5];
       C[52]  =  A[7]*B[5];
       C[53]  =  A[8]*B[5];
       C[54]  =  A[0]*B[6];
       C[55]  =  A[1]*B[6];
       C[56]  =  A[2]*B[6];
       C[57]  =  A[3]*B[6];
       C[58]  =  A[4]*B[6];
       C[59]  =  A[5]*B[6];
       C[60]  =  A[6]*B[6];
       C[61]  =  A[7]*B[6];
       C[62]  =  A[8]*B[6];
       C[63]  =  A[0]*B[7];
       C[64]  =  A[1]*B[7];
       C[65]  =  A[2]*B[7];
       C[66]  =  A[3]*B[7];
       C[67]  =  A[4]*B[7];
       C[68]  =  A[5]*B[7];
       C[69]  =  A[6]*B[7];
       C[70]  =  A[7]*B[7];
       C[71]  =  A[8]*B[7];
       C[72]  =  A[0]*B[8];
       C[73]  =  A[1]*B[8];
       C[74]  =  A[2]*B[8];
       C[75]  =  A[3]*B[8];
       C[76]  =  A[4]*B[8];
       C[77]  =  A[5]*B[8];
       C[78]  =  A[6]*B[8];
       C[79]  =  A[7]*B[8];
       C[80]  =  A[8]*B[8];   
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between fourth order tensor and second order tensor
 * C_iIjJ  =  E_jpq*E_JPQ*H_iIpP*B_qQ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_42_(mwSize dim, const double *H, const double *B, double *C) 
{
  C[0]   =  B[8]*H[36] - B[7]*H[45] - B[5]*H[63] + B[4]*H[72];
  C[1]   =  B[8]*H[37] - B[7]*H[46] - B[5]*H[64] + B[4]*H[73];
  C[2]   =  B[8]*H[38] - B[7]*H[47] - B[5]*H[65] + B[4]*H[74];
  C[3]   =  B[8]*H[39] - B[7]*H[48] - B[5]*H[66] + B[4]*H[75];
  C[4]   =  B[8]*H[40] - B[7]*H[49] - B[5]*H[67] + B[4]*H[76];
  C[5]   =  B[8]*H[41] - B[7]*H[50] - B[5]*H[68] + B[4]*H[77];
  C[6]   =  B[8]*H[42] - B[7]*H[51] - B[5]*H[69] + B[4]*H[78];
  C[7]   =  B[8]*H[43] - B[7]*H[52] - B[5]*H[70] + B[4]*H[79];
  C[8]   =  B[8]*H[44] - B[7]*H[53] - B[5]*H[71] + B[4]*H[80];
  C[9]   =  B[6]*H[45] - B[8]*H[27] + B[5]*H[54] - B[3]*H[72];
  C[10]  =  B[6]*H[46] - B[8]*H[28] + B[5]*H[55] - B[3]*H[73];
  C[11]  =  B[6]*H[47] - B[8]*H[29] + B[5]*H[56] - B[3]*H[74];
  C[12]  =  B[6]*H[48] - B[8]*H[30] + B[5]*H[57] - B[3]*H[75];
  C[13]  =  B[6]*H[49] - B[8]*H[31] + B[5]*H[58] - B[3]*H[76];
  C[14]  =  B[6]*H[50] - B[8]*H[32] + B[5]*H[59] - B[3]*H[77];
  C[15]  =  B[6]*H[51] - B[8]*H[33] + B[5]*H[60] - B[3]*H[78];
  C[16]  =  B[6]*H[52] - B[8]*H[34] + B[5]*H[61] - B[3]*H[79];
  C[17]  =  B[6]*H[53] - B[8]*H[35] + B[5]*H[62] - B[3]*H[80];
  C[18]  =  B[7]*H[27] - B[6]*H[36] - B[4]*H[54] + B[3]*H[63];
  C[19]  =  B[7]*H[28] - B[6]*H[37] - B[4]*H[55] + B[3]*H[64];
  C[20]  =  B[7]*H[29] - B[6]*H[38] - B[4]*H[56] + B[3]*H[65];
  C[21]  =  B[7]*H[30] - B[6]*H[39] - B[4]*H[57] + B[3]*H[66];
  C[22]  =  B[7]*H[31] - B[6]*H[40] - B[4]*H[58] + B[3]*H[67];
  C[23]  =  B[7]*H[32] - B[6]*H[41] - B[4]*H[59] + B[3]*H[68];
  C[24]  =  B[7]*H[33] - B[6]*H[42] - B[4]*H[60] + B[3]*H[69];
  C[25]  =  B[7]*H[34] - B[6]*H[43] - B[4]*H[61] + B[3]*H[70];
  C[26]  =  B[7]*H[35] - B[6]*H[44] - B[4]*H[62] + B[3]*H[71];
  C[27]  =  B[7]*H[18] - B[8]*H[9]  + B[2]*H[63] - B[1]*H[72];
  C[28]  =  B[7]*H[19] - B[8]*H[10] + B[2]*H[64] - B[1]*H[73];
  C[29]  =  B[7]*H[20] - B[8]*H[11] + B[2]*H[65] - B[1]*H[74];
  C[30]  =  B[7]*H[21] - B[8]*H[12] + B[2]*H[66] - B[1]*H[75];
  C[31]  =  B[7]*H[22] - B[8]*H[13] + B[2]*H[67] - B[1]*H[76];
  C[32]  =  B[7]*H[23] - B[8]*H[14] + B[2]*H[68] - B[1]*H[77];
  C[33]  =  B[7]*H[24] - B[8]*H[15] + B[2]*H[69] - B[1]*H[78];
  C[34]  =  B[7]*H[25] - B[8]*H[16] + B[2]*H[70] - B[1]*H[79];
  C[35]  =  B[7]*H[26] - B[8]*H[17] + B[2]*H[71] - B[1]*H[80];
  C[36]  =  B[8]*H[0]  - B[6]*H[18] - B[2]*H[54] + B[0]*H[72];
  C[37]  =  B[8]*H[1]  - B[6]*H[19] - B[2]*H[55] + B[0]*H[73];
  C[38]  =  B[8]*H[2]  - B[6]*H[20] - B[2]*H[56] + B[0]*H[74];
  C[39]  =  B[8]*H[3]  - B[6]*H[21] - B[2]*H[57] + B[0]*H[75];
  C[40]  =  B[8]*H[4]  - B[6]*H[22] - B[2]*H[58] + B[0]*H[76];
  C[41]  =  B[8]*H[5]  - B[6]*H[23] - B[2]*H[59] + B[0]*H[77];
  C[42]  =  B[8]*H[6]  - B[6]*H[24] - B[2]*H[60] + B[0]*H[78];
  C[43]  =  B[8]*H[7]  - B[6]*H[25] - B[2]*H[61] + B[0]*H[79];
  C[44]  =  B[8]*H[8]  - B[6]*H[26] - B[2]*H[62] + B[0]*H[80];
  C[45]  =  B[6]*H[9]  - B[7]*H[0]  + B[1]*H[54] - B[0]*H[63];
  C[46]  =  B[6]*H[10] - B[7]*H[1]  + B[1]*H[55] - B[0]*H[64];
  C[47]  =  B[6]*H[11] - B[7]*H[2]  + B[1]*H[56] - B[0]*H[65];
  C[48]  =  B[6]*H[12] - B[7]*H[3]  + B[1]*H[57] - B[0]*H[66];
  C[49]  =  B[6]*H[13] - B[7]*H[4]  + B[1]*H[58] - B[0]*H[67];
  C[50]  =  B[6]*H[14] - B[7]*H[5]  + B[1]*H[59] - B[0]*H[68];
  C[51]  =  B[6]*H[15] - B[7]*H[6]  + B[1]*H[60] - B[0]*H[69];
  C[52]  =  B[6]*H[16] - B[7]*H[7]  + B[1]*H[61] - B[0]*H[70];
  C[53]  =  B[6]*H[17] - B[7]*H[8]  + B[1]*H[62] - B[0]*H[71];
  C[54]  =  B[5]*H[9]  - B[4]*H[18] - B[2]*H[36] + B[1]*H[45];
  C[55]  =  B[5]*H[10] - B[4]*H[19] - B[2]*H[37] + B[1]*H[46];
  C[56]  =  B[5]*H[11] - B[4]*H[20] - B[2]*H[38] + B[1]*H[47];
  C[57]  =  B[5]*H[12] - B[4]*H[21] - B[2]*H[39] + B[1]*H[48];
  C[58]  =  B[5]*H[13] - B[4]*H[22] - B[2]*H[40] + B[1]*H[49];
  C[59]  =  B[5]*H[14] - B[4]*H[23] - B[2]*H[41] + B[1]*H[50];
  C[60]  =  B[5]*H[15] - B[4]*H[24] - B[2]*H[42] + B[1]*H[51];
  C[61]  =  B[5]*H[16] - B[4]*H[25] - B[2]*H[43] + B[1]*H[52];
  C[62]  =  B[5]*H[17] - B[4]*H[26] - B[2]*H[44] + B[1]*H[53];
  C[63]  =  B[3]*H[18] - B[5]*H[0]  + B[2]*H[27] - B[0]*H[45];
  C[64]  =  B[3]*H[19] - B[5]*H[1]  + B[2]*H[28] - B[0]*H[46];
  C[65]  =  B[3]*H[20] - B[5]*H[2]  + B[2]*H[29] - B[0]*H[47];
  C[66]  =  B[3]*H[21] - B[5]*H[3]  + B[2]*H[30] - B[0]*H[48];
  C[67]  =  B[3]*H[22] - B[5]*H[4]  + B[2]*H[31] - B[0]*H[49];
  C[68]  =  B[3]*H[23] - B[5]*H[5]  + B[2]*H[32] - B[0]*H[50];
  C[69]  =  B[3]*H[24] - B[5]*H[6]  + B[2]*H[33] - B[0]*H[51];
  C[70]  =  B[3]*H[25] - B[5]*H[7]  + B[2]*H[34] - B[0]*H[52];
  C[71]  =  B[3]*H[26] - B[5]*H[8]  + B[2]*H[35] - B[0]*H[53];
  C[72]  =  B[4]*H[0]  - B[3]*H[9]  - B[1]*H[27] + B[0]*H[36];
  C[73]  =  B[4]*H[1]  - B[3]*H[10] - B[1]*H[28] + B[0]*H[37];
  C[74]  =  B[4]*H[2]  - B[3]*H[11] - B[1]*H[29] + B[0]*H[38];
  C[75]  =  B[4]*H[3]  - B[3]*H[12] - B[1]*H[30] + B[0]*H[39];
  C[76]  =  B[4]*H[4]  - B[3]*H[13] - B[1]*H[31] + B[0]*H[40];
  C[77]  =  B[4]*H[5]  - B[3]*H[14] - B[1]*H[32] + B[0]*H[41];
  C[78]  =  B[4]*H[6]  - B[3]*H[15] - B[1]*H[33] + B[0]*H[42];
  C[79]  =  B[4]*H[7]  - B[3]*H[16] - B[1]*H[34] + B[0]*H[43];
  C[80]  =  B[4]*H[8]  - B[3]*H[17] - B[1]*H[35] + B[0]*H[44]; 
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between second order tensor and fourth order tensor
 * C_iIjJ  =  E_ipq*E_IPQ*B_pP*H_qQjJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_24_(mwSize dim, const double *H, const double *B, double *C) 
{
C[0]   =   B[4]*H[8]  - B[5]*H[7] - B[7]*H[5] + B[8]*H[4];
C[1]   =   B[5]*H[6]  - B[3]*H[8] + B[6]*H[5] - B[8]*H[3];
C[2]   =   B[3]*H[7]  - B[4]*H[6] - B[6]*H[4] + B[7]*H[3];
C[3]   =   B[2]*H[7]  - B[1]*H[8] + B[7]*H[2] - B[8]*H[1];
C[4]   =   B[0]*H[8]  - B[2]*H[6] - B[6]*H[2] + B[8]*H[0];
C[5]   =   B[1]*H[6]  - B[0]*H[7] + B[6]*H[1] - B[7]*H[0];
C[6]   =   B[1]*H[5]  - B[2]*H[4] - B[4]*H[2] + B[5]*H[1];
C[7]   =   B[2]*H[3]  - B[0]*H[5] + B[3]*H[2] - B[5]*H[0];
C[8]   =   B[0]*H[4]  - B[1]*H[3] - B[3]*H[1] + B[4]*H[0];
C[9]   =   B[4]*H[17] - B[5]*H[16] - B[7]*H[14] + B[8]*H[13];
C[10]  =   B[5]*H[15] - B[3]*H[17] + B[6]*H[14] - B[8]*H[12];
C[11]  =   B[3]*H[16] - B[4]*H[15] - B[6]*H[13] + B[7]*H[12];
C[12]  =   B[2]*H[16] - B[1]*H[17] + B[7]*H[11] - B[8]*H[10];
C[13]  =   B[0]*H[17] - B[2]*H[15] - B[6]*H[11] + B[8]*H[9];
C[14]  =   B[1]*H[15] - B[0]*H[16] + B[6]*H[10] - B[7]*H[9];
C[15]  =   B[1]*H[14] - B[2]*H[13] - B[4]*H[11] + B[5]*H[10];
C[16]  =   B[2]*H[12] - B[0]*H[14] + B[3]*H[11] - B[5]*H[9];
C[17]  =   B[0]*H[13] - B[1]*H[12] - B[3]*H[10] + B[4]*H[9];
C[18]  =   B[4]*H[26] - B[5]*H[25] - B[7]*H[23] + B[8]*H[22];
C[19]  =   B[5]*H[24] - B[3]*H[26] + B[6]*H[23] - B[8]*H[21];
C[20]  =   B[3]*H[25] - B[4]*H[24] - B[6]*H[22] + B[7]*H[21];
C[21]  =   B[2]*H[25] - B[1]*H[26] + B[7]*H[20] - B[8]*H[19];
C[22]  =   B[0]*H[26] - B[2]*H[24] - B[6]*H[20] + B[8]*H[18];
C[23]  =   B[1]*H[24] - B[0]*H[25] + B[6]*H[19] - B[7]*H[18];
C[24]  =   B[1]*H[23] - B[2]*H[22] - B[4]*H[20] + B[5]*H[19];
C[25]  =   B[2]*H[21] - B[0]*H[23] + B[3]*H[20] - B[5]*H[18];
C[26]  =   B[0]*H[22] - B[1]*H[21] - B[3]*H[19] + B[4]*H[18];
C[27]  =   B[4]*H[35] - B[5]*H[34] - B[7]*H[32] + B[8]*H[31];
C[28]  =   B[5]*H[33] - B[3]*H[35] + B[6]*H[32] - B[8]*H[30];
C[29]  =   B[3]*H[34] - B[4]*H[33] - B[6]*H[31] + B[7]*H[30];
C[30]  =   B[2]*H[34] - B[1]*H[35] + B[7]*H[29] - B[8]*H[28];
C[31]  =   B[0]*H[35] - B[2]*H[33] - B[6]*H[29] + B[8]*H[27];
C[32]  =   B[1]*H[33] - B[0]*H[34] + B[6]*H[28] - B[7]*H[27];
C[33]  =   B[1]*H[32] - B[2]*H[31] - B[4]*H[29] + B[5]*H[28];
C[34]  =   B[2]*H[30] - B[0]*H[32] + B[3]*H[29] - B[5]*H[27];
C[35]  =   B[0]*H[31] - B[1]*H[30] - B[3]*H[28] + B[4]*H[27];
C[36]  =   B[4]*H[44] - B[5]*H[43] - B[7]*H[41] + B[8]*H[40];
C[37]  =   B[5]*H[42] - B[3]*H[44] + B[6]*H[41] - B[8]*H[39];
C[38]  =   B[3]*H[43] - B[4]*H[42] - B[6]*H[40] + B[7]*H[39];
C[39]  =   B[2]*H[43] - B[1]*H[44] + B[7]*H[38] - B[8]*H[37];
C[40]  =   B[0]*H[44] - B[2]*H[42] - B[6]*H[38] + B[8]*H[36];
C[41]  =   B[1]*H[42] - B[0]*H[43] + B[6]*H[37] - B[7]*H[36];
C[42]  =   B[1]*H[41] - B[2]*H[40] - B[4]*H[38] + B[5]*H[37];
C[43]  =   B[2]*H[39] - B[0]*H[41] + B[3]*H[38] - B[5]*H[36];
C[44]  =   B[0]*H[40] - B[1]*H[39] - B[3]*H[37] + B[4]*H[36];
C[45]  =   B[4]*H[53] - B[5]*H[52] - B[7]*H[50] + B[8]*H[49];
C[46]  =   B[5]*H[51] - B[3]*H[53] + B[6]*H[50] - B[8]*H[48];
C[47]  =   B[3]*H[52] - B[4]*H[51] - B[6]*H[49] + B[7]*H[48];
C[48]  =   B[2]*H[52] - B[1]*H[53] + B[7]*H[47] - B[8]*H[46];
C[49]  =   B[0]*H[53] - B[2]*H[51] - B[6]*H[47] + B[8]*H[45];
C[50]  =   B[1]*H[51] - B[0]*H[52] + B[6]*H[46] - B[7]*H[45];
C[51]  =   B[1]*H[50] - B[2]*H[49] - B[4]*H[47] + B[5]*H[46];
C[52]  =   B[2]*H[48] - B[0]*H[50] + B[3]*H[47] - B[5]*H[45];
C[53]  =   B[0]*H[49] - B[1]*H[48] - B[3]*H[46] + B[4]*H[45];
C[54]  =   B[4]*H[62] - B[5]*H[61] - B[7]*H[59] + B[8]*H[58];
C[55]  =   B[5]*H[60] - B[3]*H[62] + B[6]*H[59] - B[8]*H[57];
C[56]  =   B[3]*H[61] - B[4]*H[60] - B[6]*H[58] + B[7]*H[57];
C[57]  =   B[2]*H[61] - B[1]*H[62] + B[7]*H[56] - B[8]*H[55];
C[58]  =   B[0]*H[62] - B[2]*H[60] - B[6]*H[56] + B[8]*H[54];
C[59]  =   B[1]*H[60] - B[0]*H[61] + B[6]*H[55] - B[7]*H[54];
C[60]  =   B[1]*H[59] - B[2]*H[58] - B[4]*H[56] + B[5]*H[55];
C[61]  =   B[2]*H[57] - B[0]*H[59] + B[3]*H[56] - B[5]*H[54];
C[62]  =   B[0]*H[58] - B[1]*H[57] - B[3]*H[55] + B[4]*H[54];
C[63]  =   B[4]*H[71] - B[5]*H[70] - B[7]*H[68] + B[8]*H[67];
C[64]  =   B[5]*H[69] - B[3]*H[71] + B[6]*H[68] - B[8]*H[66];
C[65]  =   B[3]*H[70] - B[4]*H[69] - B[6]*H[67] + B[7]*H[66];
C[66]  =   B[2]*H[70] - B[1]*H[71] + B[7]*H[65] - B[8]*H[64];
C[67]  =   B[0]*H[71] - B[2]*H[69] - B[6]*H[65] + B[8]*H[63];
C[68]  =   B[1]*H[69] - B[0]*H[70] + B[6]*H[64] - B[7]*H[63];
C[69]  =   B[1]*H[68] - B[2]*H[67] - B[4]*H[65] + B[5]*H[64];
C[70]  =   B[2]*H[66] - B[0]*H[68] + B[3]*H[65] - B[5]*H[63];
C[71]  =   B[0]*H[67] - B[1]*H[66] - B[3]*H[64] + B[4]*H[63];
C[72]  =   B[4]*H[80] - B[5]*H[79] - B[7]*H[77] + B[8]*H[76];
C[73]  =   B[5]*H[78] - B[3]*H[80] + B[6]*H[77] - B[8]*H[75];
C[74]  =   B[3]*H[79] - B[4]*H[78] - B[6]*H[76] + B[7]*H[75];
C[75]  =   B[2]*H[79] - B[1]*H[80] + B[7]*H[74] - B[8]*H[73];
C[76]  =   B[0]*H[80] - B[2]*H[78] - B[6]*H[74] + B[8]*H[72];
C[77]  =   B[1]*H[78] - B[0]*H[79] + B[6]*H[73] - B[7]*H[72];
C[78]  =   B[1]*H[77] - B[2]*H[76] - B[4]*H[74] + B[5]*H[73];
C[79]  =   B[2]*H[75] - B[0]*H[77] + B[3]*H[74] - B[5]*H[72];
C[80]  =   B[0]*H[76] - B[1]*H[75] - B[3]*H[73] + B[4]*H[72];
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between third order tensor and a vector:
 * C_iIjJ  =  D_iIj*V_J     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_31_iIjJ_(mwSize dim, const double *D, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[3]*V[0];
       C[4]   =  D[4]*V[0];
       C[5]   =  D[5]*V[0];
       C[6]   =  D[6]*V[0];
       C[7]   =  D[7]*V[0];
       C[8]   =  D[0]*V[1];
       C[9]   =  D[1]*V[1];
       C[10]  =  D[2]*V[1];
       C[11]  =  D[3]*V[1];
       C[12]  =  D[4]*V[1];
       C[13]  =  D[5]*V[1];
       C[14]  =  D[6]*V[1];
       C[15]  =  D[7]*V[1];       
    }
    else if (dim==3){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[3]*V[0];
       C[4]   =  D[4]*V[0];
       C[5]   =  D[5]*V[0];
       C[6]   =  D[6]*V[0];
       C[7]   =  D[7]*V[0];
       C[8]   =  D[8]*V[0];
       C[9]   =  D[9]*V[0];
       C[10]  =  D[10]*V[0];
       C[11]  =  D[11]*V[0];
       C[12]  =  D[12]*V[0];
       C[13]  =  D[13]*V[0];
       C[14]  =  D[14]*V[0];
       C[15]  =  D[15]*V[0];
       C[16]  =  D[16]*V[0];
       C[17]  =  D[17]*V[0];
       C[18]  =  D[18]*V[0];
       C[19]  =  D[19]*V[0];
       C[20]  =  D[20]*V[0];
       C[21]  =  D[21]*V[0];
       C[22]  =  D[22]*V[0];
       C[23]  =  D[23]*V[0];
       C[24]  =  D[24]*V[0];
       C[25]  =  D[25]*V[0];
       C[26]  =  D[26]*V[0];
       C[27]  =  D[0]*V[1];
       C[28]  =  D[1]*V[1];
       C[29]  =  D[2]*V[1];
       C[30]  =  D[3]*V[1];
       C[31]  =  D[4]*V[1];
       C[32]  =  D[5]*V[1];
       C[33]  =  D[6]*V[1];
       C[34]  =  D[7]*V[1];
       C[35]  =  D[8]*V[1];
       C[36]  =  D[9]*V[1];
       C[37]  =  D[10]*V[1];
       C[38]  =  D[11]*V[1];
       C[39]  =  D[12]*V[1];
       C[40]  =  D[13]*V[1];
       C[41]  =  D[14]*V[1];
       C[42]  =  D[15]*V[1];
       C[43]  =  D[16]*V[1];
       C[44]  =  D[17]*V[1];
       C[45]  =  D[18]*V[1];
       C[46]  =  D[19]*V[1];
       C[47]  =  D[20]*V[1];
       C[48]  =  D[21]*V[1];
       C[49]  =  D[22]*V[1];
       C[50]  =  D[23]*V[1];
       C[51]  =  D[24]*V[1];
       C[52]  =  D[25]*V[1];
       C[53]  =  D[26]*V[1];
       C[54]  =  D[0]*V[2];
       C[55]  =  D[1]*V[2];
       C[56]  =  D[2]*V[2];
       C[57]  =  D[3]*V[2];
       C[58]  =  D[4]*V[2];
       C[59]  =  D[5]*V[2];
       C[60]  =  D[6]*V[2];
       C[61]  =  D[7]*V[2];
       C[62]  =  D[8]*V[2];
       C[63]  =  D[9]*V[2];
       C[64]  =  D[10]*V[2];
       C[65]  =  D[11]*V[2];
       C[66]  =  D[12]*V[2];
       C[67]  =  D[13]*V[2];
       C[68]  =  D[14]*V[2];
       C[69]  =  D[15]*V[2];
       C[70]  =  D[16]*V[2];
       C[71]  =  D[17]*V[2];
       C[72]  =  D[18]*V[2];
       C[73]  =  D[19]*V[2];
       C[74]  =  D[20]*V[2];
       C[75]  =  D[21]*V[2];
       C[76]  =  D[22]*V[2];
       C[77]  =  D[23]*V[2];
       C[78]  =  D[24]*V[2];
       C[79]  =  D[25]*V[2];
       C[80]  =  D[26]*V[2];
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between third order tensor and a vector:
 * C_iIjJ  =  D_ijJ*V_I     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_31_ijJI_(mwSize dim, const double *D, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[0]*V[1];
       C[3]   =  D[1]*V[1];
       C[4]   =  D[2]*V[0];
       C[5]   =  D[3]*V[0];
       C[6]   =  D[2]*V[1];
       C[7]   =  D[3]*V[1];
       C[8]   =  D[4]*V[0];
       C[9]   =  D[5]*V[0];
       C[10]  =  D[4]*V[1];
       C[11]  =  D[5]*V[1];
       C[12]  =  D[6]*V[0];
       C[13]  =  D[7]*V[0];
       C[14]  =  D[6]*V[1];
       C[15]  =  D[7]*V[1];
     }
    else if (dim==3){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[0]*V[1];
       C[4]   =  D[1]*V[1];
       C[5]   =  D[2]*V[1];
       C[6]   =  D[0]*V[2];
       C[7]   =  D[1]*V[2];
       C[8]   =  D[2]*V[2];
       C[9]   =  D[3]*V[0];
       C[10]  =  D[4]*V[0];
       C[11]  =  D[5]*V[0];
       C[12]  =  D[3]*V[1];
       C[13]  =  D[4]*V[1];
       C[14]  =  D[5]*V[1];
       C[15]  =  D[3]*V[2];
       C[16]  =  D[4]*V[2];
       C[17]  =  D[5]*V[2];
       C[18]  =  D[6]*V[0];
       C[19]  =  D[7]*V[0];
       C[20]  =  D[8]*V[0];
       C[21]  =  D[6]*V[1];
       C[22]  =  D[7]*V[1];
       C[23]  =  D[8]*V[1];
       C[24]  =  D[6]*V[2];
       C[25]  =  D[7]*V[2];
       C[26]  =  D[8]*V[2];
       C[27]  =  D[9]*V[0];
       C[28]  =  D[10]*V[0];
       C[29]  =  D[11]*V[0];
       C[30]  =  D[9]*V[1];
       C[31]  =  D[10]*V[1];
       C[32]  =  D[11]*V[1];
       C[33]  =  D[9]*V[2];
       C[34]  =  D[10]*V[2];
       C[35]  =  D[11]*V[2];
       C[36]  =  D[12]*V[0];
       C[37]  =  D[13]*V[0];
       C[38]  =  D[14]*V[0];
       C[39]  =  D[12]*V[1];
       C[40]  =  D[13]*V[1];
       C[41]  =  D[14]*V[1];
       C[42]  =  D[12]*V[2];
       C[43]  =  D[13]*V[2];
       C[44]  =  D[14]*V[2];
       C[45]  =  D[15]*V[0];
       C[46]  =  D[16]*V[0];
       C[47]  =  D[17]*V[0];
       C[48]  =  D[15]*V[1];
       C[49]  =  D[16]*V[1];
       C[50]  =  D[17]*V[1];
       C[51]  =  D[15]*V[2];
       C[52]  =  D[16]*V[2];
       C[53]  =  D[17]*V[2];
       C[54]  =  D[18]*V[0];
       C[55]  =  D[19]*V[0];
       C[56]  =  D[20]*V[0];
       C[57]  =  D[18]*V[1];
       C[58]  =  D[19]*V[1];
       C[59]  =  D[20]*V[1];
       C[60]  =  D[18]*V[2];
       C[61]  =  D[19]*V[2];
       C[62]  =  D[20]*V[2];
       C[63]  =  D[21]*V[0];
       C[64]  =  D[22]*V[0];
       C[65]  =  D[23]*V[0];
       C[66]  =  D[21]*V[1];
       C[67]  =  D[22]*V[1];
       C[68]  =  D[23]*V[1];
       C[69]  =  D[21]*V[2];
       C[70]  =  D[22]*V[2];
       C[71]  =  D[23]*V[2];
       C[72]  =  D[24]*V[0];
       C[73]  =  D[25]*V[0];
       C[74]  =  D[26]*V[0];
       C[75]  =  D[24]*V[1];
       C[76]  =  D[25]*V[1];
       C[77]  =  D[26]*V[1];
       C[78]  =  D[24]*V[2];
       C[79]  =  D[25]*V[2];
       C[80]  =  D[26]*V[2];
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between a second order tensor and two vectors
 * C_iIjJ  =  U_I*V_J*A_ij     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_211_ijIJ_(mwSize dim, const double *A, const double *U, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*U[0]*V[0];
       C[1]   =  A[1]*U[0]*V[0];
       C[2]   =  A[0]*U[1]*V[0];
       C[3]   =  A[1]*U[1]*V[0];
       C[4]   =  A[2]*U[0]*V[0];
       C[5]   =  A[3]*U[0]*V[0];
       C[6]   =  A[2]*U[1]*V[0];
       C[7]   =  A[3]*U[1]*V[0];
       C[8]   =  A[0]*U[0]*V[1];
       C[9]   =  A[1]*U[0]*V[1];
       C[10]  =  A[0]*U[1]*V[1];
       C[11]  =  A[1]*U[1]*V[1];
       C[12]  =  A[2]*U[0]*V[1];
       C[13]  =  A[3]*U[0]*V[1];
       C[14]  =  A[2]*U[1]*V[1];
       C[15]  =  A[3]*U[1]*V[1];
    }
    else if (dim==3){
       C[0]   =  A[0]*U[0]*V[0];
       C[1]   =  A[1]*U[0]*V[0];
       C[2]   =  A[2]*U[0]*V[0];
       C[3]   =  A[0]*U[1]*V[0];
       C[4]   =  A[1]*U[1]*V[0];
       C[5]   =  A[2]*U[1]*V[0];
       C[6]   =  A[0]*U[2]*V[0];
       C[7]   =  A[1]*U[2]*V[0];
       C[8]   =  A[2]*U[2]*V[0];
       C[9]   =  A[3]*U[0]*V[0];
       C[10]  =  A[4]*U[0]*V[0];
       C[11]  =  A[5]*U[0]*V[0];
       C[12]  =  A[3]*U[1]*V[0];
       C[13]  =  A[4]*U[1]*V[0];
       C[14]  =  A[5]*U[1]*V[0];
       C[15]  =  A[3]*U[2]*V[0];
       C[16]  =  A[4]*U[2]*V[0];
       C[17]  =  A[5]*U[2]*V[0];
       C[18]  =  A[6]*U[0]*V[0];
       C[19]  =  A[7]*U[0]*V[0];
       C[20]  =  A[8]*U[0]*V[0];
       C[21]  =  A[6]*U[1]*V[0];
       C[22]  =  A[7]*U[1]*V[0];
       C[23]  =  A[8]*U[1]*V[0];
       C[24]  =  A[6]*U[2]*V[0];
       C[25]  =  A[7]*U[2]*V[0];
       C[26]  =  A[8]*U[2]*V[0];
       C[27]  =  A[0]*U[0]*V[1];
       C[28]  =  A[1]*U[0]*V[1];
       C[29]  =  A[2]*U[0]*V[1];
       C[30]  =  A[0]*U[1]*V[1];
       C[31]  =  A[1]*U[1]*V[1];
       C[32]  =  A[2]*U[1]*V[1];
       C[33]  =  A[0]*U[2]*V[1];
       C[34]  =  A[1]*U[2]*V[1];
       C[35]  =  A[2]*U[2]*V[1];
       C[36]  =  A[3]*U[0]*V[1];
       C[37]  =  A[4]*U[0]*V[1];
       C[38]  =  A[5]*U[0]*V[1];
       C[39]  =  A[3]*U[1]*V[1];
       C[40]  =  A[4]*U[1]*V[1];
       C[41]  =  A[5]*U[1]*V[1];
       C[42]  =  A[3]*U[2]*V[1];
       C[43]  =  A[4]*U[2]*V[1];
       C[44]  =  A[5]*U[2]*V[1];
       C[45]  =  A[6]*U[0]*V[1];
       C[46]  =  A[7]*U[0]*V[1];
       C[47]  =  A[8]*U[0]*V[1];
       C[48]  =  A[6]*U[1]*V[1];
       C[49]  =  A[7]*U[1]*V[1];
       C[50]  =  A[8]*U[1]*V[1];
       C[51]  =  A[6]*U[2]*V[1];
       C[52]  =  A[7]*U[2]*V[1];
       C[53]  =  A[8]*U[2]*V[1];
       C[54]  =  A[0]*U[0]*V[2];
       C[55]  =  A[1]*U[0]*V[2];
       C[56]  =  A[2]*U[0]*V[2];
       C[57]  =  A[0]*U[1]*V[2];
       C[58]  =  A[1]*U[1]*V[2];
       C[59]  =  A[2]*U[1]*V[2];
       C[60]  =  A[0]*U[2]*V[2];
       C[61]  =  A[1]*U[2]*V[2];
       C[62]  =  A[2]*U[2]*V[2];
       C[63]  =  A[3]*U[0]*V[2];
       C[64]  =  A[4]*U[0]*V[2];
       C[65]  =  A[5]*U[0]*V[2];
       C[66]  =  A[3]*U[1]*V[2];
       C[67]  =  A[4]*U[1]*V[2];
       C[68]  =  A[5]*U[1]*V[2];
       C[69]  =  A[3]*U[2]*V[2];
       C[70]  =  A[4]*U[2]*V[2];
       C[71]  =  A[5]*U[2]*V[2];
       C[72]  =  A[6]*U[0]*V[2];
       C[73]  =  A[7]*U[0]*V[2];
       C[74]  =  A[8]*U[0]*V[2];
       C[75]  =  A[6]*U[1]*V[2];
       C[76]  =  A[7]*U[1]*V[2];
       C[77]  =  A[8]*U[1]*V[2];
       C[78]  =  A[6]*U[2]*V[2];
       C[79]  =  A[7]*U[2]*V[2];
       C[80]  =  A[8]*U[2]*V[2];
    }
}



/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product of four vectors A, B, C and D:
/* Tensor_iIjJ = A_i*B_I*C_j*D_J
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void outer_1_1_1_1_(mwSize dim, const double *A, const double *B, const double *C, const double *D, double *Tensor) 
{ 
    if (dim==2){
       Tensor[0]   =  A[0]*B[0]*C[0]*D[0];
       Tensor[1]   =  A[1]*B[0]*C[0]*D[0];
       Tensor[2]   =  A[0]*B[1]*C[0]*D[0];
       Tensor[3]   =  A[1]*B[1]*C[0]*D[0];
       Tensor[4]   =  A[0]*B[0]*C[1]*D[0];
       Tensor[5]   =  A[1]*B[0]*C[1]*D[0];
       Tensor[6]   =  A[0]*B[1]*C[1]*D[0];
       Tensor[7]   =  A[1]*B[1]*C[1]*D[0];
       Tensor[8]   =  A[0]*B[0]*C[0]*D[1];
       Tensor[9]   =  A[1]*B[0]*C[0]*D[1];
       Tensor[10]  =  A[0]*B[1]*C[0]*D[1];
       Tensor[11]  =  A[1]*B[1]*C[0]*D[1];
       Tensor[12]  =  A[0]*B[0]*C[1]*D[1];
       Tensor[13]  =  A[1]*B[0]*C[1]*D[1];
       Tensor[14]  =  A[0]*B[1]*C[1]*D[1];
       Tensor[15]  =  A[1]*B[1]*C[1]*D[1];   
    }
    else if (dim==3){
       Tensor[0]   =  A[0]*B[0]*C[0]*D[0];
       Tensor[1]   =  A[1]*B[0]*C[0]*D[0];
       Tensor[2]   =  A[2]*B[0]*C[0]*D[0];
       Tensor[3]   =  A[0]*B[1]*C[0]*D[0];
       Tensor[4]   =  A[1]*B[1]*C[0]*D[0];
       Tensor[5]   =  A[2]*B[1]*C[0]*D[0];
       Tensor[6]   =  A[0]*B[2]*C[0]*D[0];
       Tensor[7]   =  A[1]*B[2]*C[0]*D[0];
       Tensor[8]   =  A[2]*B[2]*C[0]*D[0];
       Tensor[9]   =  A[0]*B[0]*C[1]*D[0];
       Tensor[10]  =  A[1]*B[0]*C[1]*D[0];
       Tensor[11]  =  A[2]*B[0]*C[1]*D[0];
       Tensor[12]  =  A[0]*B[1]*C[1]*D[0];
       Tensor[13]  =  A[1]*B[1]*C[1]*D[0];
       Tensor[14]  =  A[2]*B[1]*C[1]*D[0];
       Tensor[15]  =  A[0]*B[2]*C[1]*D[0];
       Tensor[16]  =  A[1]*B[2]*C[1]*D[0];
       Tensor[17]  =  A[2]*B[2]*C[1]*D[0];
       Tensor[18]  =  A[0]*B[0]*C[2]*D[0];
       Tensor[19]  =  A[1]*B[0]*C[2]*D[0];
       Tensor[20]  =  A[2]*B[0]*C[2]*D[0];
       Tensor[21]  =  A[0]*B[1]*C[2]*D[0];
       Tensor[22]  =  A[1]*B[1]*C[2]*D[0];
       Tensor[23]  =  A[2]*B[1]*C[2]*D[0];
       Tensor[24]  =  A[0]*B[2]*C[2]*D[0];
       Tensor[25]  =  A[1]*B[2]*C[2]*D[0];
       Tensor[26]  =  A[2]*B[2]*C[2]*D[0];
       Tensor[27]  =  A[0]*B[0]*C[0]*D[1];
       Tensor[28]  =  A[1]*B[0]*C[0]*D[1];
       Tensor[29]  =  A[2]*B[0]*C[0]*D[1];
       Tensor[30]  =  A[0]*B[1]*C[0]*D[1];
       Tensor[31]  =  A[1]*B[1]*C[0]*D[1];
       Tensor[32]  =  A[2]*B[1]*C[0]*D[1];
       Tensor[33]  =  A[0]*B[2]*C[0]*D[1];
       Tensor[34]  =  A[1]*B[2]*C[0]*D[1];
       Tensor[35]  =  A[2]*B[2]*C[0]*D[1];
       Tensor[36]  =  A[0]*B[0]*C[1]*D[1];
       Tensor[37]  =  A[1]*B[0]*C[1]*D[1];
       Tensor[38]  =  A[2]*B[0]*C[1]*D[1];
       Tensor[39]  =  A[0]*B[1]*C[1]*D[1];
       Tensor[40]  =  A[1]*B[1]*C[1]*D[1];
       Tensor[41]  =  A[2]*B[1]*C[1]*D[1];
       Tensor[42]  =  A[0]*B[2]*C[1]*D[1];
       Tensor[43]  =  A[1]*B[2]*C[1]*D[1];
       Tensor[44]  =  A[2]*B[2]*C[1]*D[1];
       Tensor[45]  =  A[0]*B[0]*C[2]*D[1];
       Tensor[46]  =  A[1]*B[0]*C[2]*D[1];
       Tensor[47]  =  A[2]*B[0]*C[2]*D[1];
       Tensor[48]  =  A[0]*B[1]*C[2]*D[1];
       Tensor[49]  =  A[1]*B[1]*C[2]*D[1];
       Tensor[50]  =  A[2]*B[1]*C[2]*D[1];
       Tensor[51]  =  A[0]*B[2]*C[2]*D[1];
       Tensor[52]  =  A[1]*B[2]*C[2]*D[1];
       Tensor[53]  =  A[2]*B[2]*C[2]*D[1];
       Tensor[54]  =  A[0]*B[0]*C[0]*D[2];
       Tensor[55]  =  A[1]*B[0]*C[0]*D[2];
       Tensor[56]  =  A[2]*B[0]*C[0]*D[2];
       Tensor[57]  =  A[0]*B[1]*C[0]*D[2];
       Tensor[58]  =  A[1]*B[1]*C[0]*D[2];
       Tensor[59]  =  A[2]*B[1]*C[0]*D[2];
       Tensor[60]  =  A[0]*B[2]*C[0]*D[2];
       Tensor[61]  =  A[1]*B[2]*C[0]*D[2];
       Tensor[62]  =  A[2]*B[2]*C[0]*D[2];
       Tensor[63]  =  A[0]*B[0]*C[1]*D[2];
       Tensor[64]  =  A[1]*B[0]*C[1]*D[2];
       Tensor[65]  =  A[2]*B[0]*C[1]*D[2];
       Tensor[66]  =  A[0]*B[1]*C[1]*D[2];
       Tensor[67]  =  A[1]*B[1]*C[1]*D[2];
       Tensor[68]  =  A[2]*B[1]*C[1]*D[2];
       Tensor[69]  =  A[0]*B[2]*C[1]*D[2];
       Tensor[70]  =  A[1]*B[2]*C[1]*D[2];
       Tensor[71]  =  A[2]*B[2]*C[1]*D[2];
       Tensor[72]  =  A[0]*B[0]*C[2]*D[2];
       Tensor[73]  =  A[1]*B[0]*C[2]*D[2];
       Tensor[74]  =  A[2]*B[0]*C[2]*D[2];
       Tensor[75]  =  A[0]*B[1]*C[2]*D[2];
       Tensor[76]  =  A[1]*B[1]*C[2]*D[2];
       Tensor[77]  =  A[2]*B[1]*C[2]*D[2];
       Tensor[78]  =  A[0]*B[2]*C[2]*D[2];
       Tensor[79]  =  A[1]*B[2]*C[2]*D[2];
       Tensor[80]  =  A[2]*B[2]*C[2]*D[2];
    }
}

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Contraction between 4th order tensor A and sixth order tensor B:
/* Matrix_iI  =  B_jJkK*A_jJkKiI
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void contraction_4_6_(mwSize dim, const double *A, const double *B, double *Matrix) 
{ 
    if (dim==2){
       Matrix[0]  =  A[0]*B[0] +  A[1]*B[1] +  A[2]*B[2] +  A[3]*B[3] +  A[4]*B[4] +  A[5]*B[5] +  A[6]*B[6] +  A[7]*B[7] +  A[8]*B[8] +  A[9]*B[9] +  A[10]*B[10] +  A[11]*B[11] +  A[12]*B[12] +  A[13]*B[13] +  A[14]*B[14] +  A[15]*B[15];
       Matrix[1]  =  A[0]*B[16] +  A[1]*B[17] +  A[2]*B[18] +  A[3]*B[19] +  A[4]*B[20] +  A[5]*B[21] +  A[6]*B[22] +  A[7]*B[23] +  A[8]*B[24] +  A[9]*B[25] +  A[10]*B[26] +  A[11]*B[27] +  A[12]*B[28] +  A[13]*B[29] +  A[14]*B[30] +  A[15]*B[31];
       Matrix[2]  =  A[0]*B[32] +  A[1]*B[33] +  A[2]*B[34] +  A[3]*B[35] +  A[4]*B[36] +  A[5]*B[37] +  A[6]*B[38] +  A[7]*B[39] +  A[8]*B[40] +  A[9]*B[41] +  A[10]*B[42] +  A[11]*B[43] +  A[12]*B[44] +  A[13]*B[45] +  A[14]*B[46] +  A[15]*B[47];
       Matrix[3]  =  A[0]*B[48] +  A[1]*B[49] +  A[2]*B[50] +  A[3]*B[51] +  A[4]*B[52] +  A[5]*B[53] +  A[6]*B[54] +  A[7]*B[55] +  A[8]*B[56] +  A[9]*B[57] +  A[10]*B[58] +  A[11]*B[59] +  A[12]*B[60] +  A[13]*B[61] +  A[14]*B[62] +  A[15]*B[63];
    }
    else if (dim==3){
        Matrix[0]  =  A[0]*B[0]  + A[1]*B[1]  + A[2]*B[2]  + A[3]*B[3]  + A[4]*B[4]  + A[5]*B[5]  + A[6]*B[6]  + A[7]*B[7]  + A[8]*B[8]  + A[9]*B[9]  + A[10]*B[10] +  A[11]*B[11] +  A[12]*B[12] +  A[13]*B[13] +  A[14]*B[14] +  A[15]*B[15] +  A[16]*B[16] +  A[17]*B[17] +  A[18]*B[18] +  A[19]*B[19] +  A[20]*B[20] +  A[21]*B[21] +  A[22]*B[22] +  A[23]*B[23] +  A[24]*B[24] +  A[25]*B[25] +  A[26]*B[26] +  A[27]*B[27] +  A[28]*B[28] +  A[29]*B[29] +  A[30]*B[30] +  A[31]*B[31] +  A[32]*B[32] +  A[33]*B[33] +  A[34]*B[34] +  A[35]*B[35] +  A[36]*B[36] +  A[37]*B[37] +  A[38]*B[38] +  A[39]*B[39] +  A[40]*B[40] +  A[41]*B[41] +  A[42]*B[42] +  A[43]*B[43] +  A[44]*B[44] +  A[45]*B[45] +  A[46]*B[46] +  A[47]*B[47] +  A[48]*B[48] +  A[49]*B[49] +  A[50]*B[50] +  A[51]*B[51] +  A[52]*B[52] +  A[53]*B[53] +  A[54]*B[54] +  A[55]*B[55] +  A[56]*B[56] +  A[57]*B[57] +  A[58]*B[58] +  A[59]*B[59] +  A[60]*B[60] +  A[61]*B[61] +  A[62]*B[62] +  A[63]*B[63] +  A[64]*B[64] +  A[65]*B[65] +  A[66]*B[66] +  A[67]*B[67] +  A[68]*B[68] +  A[69]*B[69] +  A[70]*B[70] +  A[71]*B[71] +  A[72]*B[72] +  A[73]*B[73] +  A[74]*B[74] +  A[75]*B[75] +  A[76]*B[76] +  A[77]*B[77] +  A[78]*B[78] +  A[79]*B[79] +  A[80]*B[80];
        Matrix[1]  =  A[0]*B[81]  +  A[1]*B[82]  +  A[2]*B[83]  +  A[3]*B[84]  +  A[4]*B[85]  +  A[5]*B[86]  +  A[6]*B[87]  +  A[7]*B[88]  +  A[8]*B[89]  +  A[9]*B[90]  +  A[10]*B[91]  +  A[11]*B[92]  +  A[12]*B[93]  +  A[13]*B[94]  +  A[14]*B[95]  +  A[15]*B[96]  +  A[16]*B[97]  +  A[17]*B[98]  +  A[18]*B[99]  +  A[19]*B[100] +  A[20]*B[101] +  A[21]*B[102] +  A[22]*B[103] +  A[23]*B[104] +  A[24]*B[105] +  A[25]*B[106] +  A[26]*B[107] +  A[27]*B[108] +  A[28]*B[109] +  A[29]*B[110] +  A[30]*B[111] +  A[31]*B[112] +  A[32]*B[113] +  A[33]*B[114] +  A[34]*B[115] +  A[35]*B[116] +  A[36]*B[117] +  A[37]*B[118] +  A[38]*B[119] +  A[39]*B[120] +  A[40]*B[121] +  A[41]*B[122] +  A[42]*B[123] +  A[43]*B[124] +  A[44]*B[125] +  A[45]*B[126] +  A[46]*B[127] +  A[47]*B[128] +  A[48]*B[129] +  A[49]*B[130] +  A[50]*B[131] +  A[51]*B[132] +  A[52]*B[133] +  A[53]*B[134] +  A[54]*B[135] +  A[55]*B[136] +  A[56]*B[137] +  A[57]*B[138] +  A[58]*B[139] +  A[59]*B[140] +  A[60]*B[141] +  A[61]*B[142] +  A[62]*B[143] +  A[63]*B[144] +  A[64]*B[145] +  A[65]*B[146] +  A[66]*B[147] +  A[67]*B[148] +  A[68]*B[149] +  A[69]*B[150] +  A[70]*B[151] +  A[71]*B[152] +  A[72]*B[153] +  A[73]*B[154] +  A[74]*B[155] +  A[75]*B[156] +  A[76]*B[157] +  A[77]*B[158] +  A[78]*B[159] +  A[79]*B[160] +  A[80]*B[161];
        Matrix[2]  =  A[0]*B[162] +  A[1]*B[163] +  A[2]*B[164] +  A[3]*B[165] +  A[4]*B[166] +  A[5]*B[167] +  A[6]*B[168] +  A[7]*B[169] +  A[8]*B[170] +  A[9]*B[171] +  A[10]*B[172] +  A[11]*B[173] +  A[12]*B[174] +  A[13]*B[175] +  A[14]*B[176] +  A[15]*B[177] +  A[16]*B[178] +  A[17]*B[179] +  A[18]*B[180] +  A[19]*B[181] +  A[20]*B[182] +  A[21]*B[183] +  A[22]*B[184] +  A[23]*B[185] +  A[24]*B[186] +  A[25]*B[187] +  A[26]*B[188] +  A[27]*B[189] +  A[28]*B[190] +  A[29]*B[191] +  A[30]*B[192] +  A[31]*B[193] +  A[32]*B[194] +  A[33]*B[195] +  A[34]*B[196] +  A[35]*B[197] +  A[36]*B[198] +  A[37]*B[199] +  A[38]*B[200] +  A[39]*B[201] +  A[40]*B[202] +  A[41]*B[203] +  A[42]*B[204] +  A[43]*B[205] +  A[44]*B[206] +  A[45]*B[207] +  A[46]*B[208] +  A[47]*B[209] +  A[48]*B[210] +  A[49]*B[211] +  A[50]*B[212] +  A[51]*B[213] +  A[52]*B[214] +  A[53]*B[215] +  A[54]*B[216] +  A[55]*B[217] +  A[56]*B[218] +  A[57]*B[219] +  A[58]*B[220] +  A[59]*B[221] +  A[60]*B[222] +  A[61]*B[223] +  A[62]*B[224] +  A[63]*B[225] +  A[64]*B[226] +  A[65]*B[227] +  A[66]*B[228] +  A[67]*B[229] +  A[68]*B[230] +  A[69]*B[231] +  A[70]*B[232] +  A[71]*B[233] +  A[72]*B[234] +  A[73]*B[235] +  A[74]*B[236] +  A[75]*B[237] +  A[76]*B[238] +  A[77]*B[239] +  A[78]*B[240] +  A[79]*B[241] +  A[80]*B[242];
        Matrix[3]  =  A[0]*B[243] +  A[1]*B[244] +  A[2]*B[245] +  A[3]*B[246] +  A[4]*B[247] +  A[5]*B[248] +  A[6]*B[249] +  A[7]*B[250] +  A[8]*B[251] +  A[9]*B[252] +  A[10]*B[253] +  A[11]*B[254] +  A[12]*B[255] +  A[13]*B[256] +  A[14]*B[257] +  A[15]*B[258] +  A[16]*B[259] +  A[17]*B[260] +  A[18]*B[261] +  A[19]*B[262] +  A[20]*B[263] +  A[21]*B[264] +  A[22]*B[265] +  A[23]*B[266] +  A[24]*B[267] +  A[25]*B[268] +  A[26]*B[269] +  A[27]*B[270] +  A[28]*B[271] +  A[29]*B[272] +  A[30]*B[273] +  A[31]*B[274] +  A[32]*B[275] +  A[33]*B[276] +  A[34]*B[277] +  A[35]*B[278] +  A[36]*B[279] +  A[37]*B[280] +  A[38]*B[281] +  A[39]*B[282] +  A[40]*B[283] +  A[41]*B[284] +  A[42]*B[285] +  A[43]*B[286] +  A[44]*B[287] +  A[45]*B[288] +  A[46]*B[289] +  A[47]*B[290] +  A[48]*B[291] +  A[49]*B[292] +  A[50]*B[293] +  A[51]*B[294] +  A[52]*B[295] +  A[53]*B[296] +  A[54]*B[297] +  A[55]*B[298] +  A[56]*B[299] +  A[57]*B[300] +  A[58]*B[301] +  A[59]*B[302] +  A[60]*B[303] +  A[61]*B[304] +  A[62]*B[305] +  A[63]*B[306] +  A[64]*B[307] +  A[65]*B[308] +  A[66]*B[309] +  A[67]*B[310] +  A[68]*B[311] +  A[69]*B[312] +  A[70]*B[313] +  A[71]*B[314] +  A[72]*B[315] +  A[73]*B[316] +  A[74]*B[317] +  A[75]*B[318] +  A[76]*B[319] +  A[77]*B[320] +  A[78]*B[321] +  A[79]*B[322] +  A[80]*B[323];
        Matrix[4]  =  A[0]*B[324] +  A[1]*B[325] +  A[2]*B[326] +  A[3]*B[327] +  A[4]*B[328] +  A[5]*B[329] +  A[6]*B[330] +  A[7]*B[331] +  A[8]*B[332] +  A[9]*B[333] +  A[10]*B[334] +  A[11]*B[335] +  A[12]*B[336] +  A[13]*B[337] +  A[14]*B[338] +  A[15]*B[339] +  A[16]*B[340] +  A[17]*B[341] +  A[18]*B[342] +  A[19]*B[343] +  A[20]*B[344] +  A[21]*B[345] +  A[22]*B[346] +  A[23]*B[347] +  A[24]*B[348] +  A[25]*B[349] +  A[26]*B[350] +  A[27]*B[351] +  A[28]*B[352] +  A[29]*B[353] +  A[30]*B[354] +  A[31]*B[355] +  A[32]*B[356] +  A[33]*B[357] +  A[34]*B[358] +  A[35]*B[359] +  A[36]*B[360] +  A[37]*B[361] +  A[38]*B[362] +  A[39]*B[363] +  A[40]*B[364] +  A[41]*B[365] +  A[42]*B[366] +  A[43]*B[367] +  A[44]*B[368] +  A[45]*B[369] +  A[46]*B[370] +  A[47]*B[371] +  A[48]*B[372] +  A[49]*B[373] +  A[50]*B[374] +  A[51]*B[375] +  A[52]*B[376] +  A[53]*B[377] +  A[54]*B[378] +  A[55]*B[379] +  A[56]*B[380] +  A[57]*B[381] +  A[58]*B[382] +  A[59]*B[383] +  A[60]*B[384] +  A[61]*B[385] +  A[62]*B[386] +  A[63]*B[387] +  A[64]*B[388] +  A[65]*B[389] +  A[66]*B[390] +  A[67]*B[391] +  A[68]*B[392] +  A[69]*B[393] +  A[70]*B[394] +  A[71]*B[395] +  A[72]*B[396] +  A[73]*B[397] +  A[74]*B[398] +  A[75]*B[399] +  A[76]*B[400] +  A[77]*B[401] +  A[78]*B[402] +  A[79]*B[403] +  A[80]*B[404];
        Matrix[5]  =  A[0]*B[405] +  A[1]*B[406] +  A[2]*B[407] +  A[3]*B[408] +  A[4]*B[409] +  A[5]*B[410] +  A[6]*B[411] +  A[7]*B[412] +  A[8]*B[413] +  A[9]*B[414] +  A[10]*B[415] +  A[11]*B[416] +  A[12]*B[417] +  A[13]*B[418] +  A[14]*B[419] +  A[15]*B[420] +  A[16]*B[421] +  A[17]*B[422] +  A[18]*B[423] +  A[19]*B[424] +  A[20]*B[425] +  A[21]*B[426] +  A[22]*B[427] +  A[23]*B[428] +  A[24]*B[429] +  A[25]*B[430] +  A[26]*B[431] +  A[27]*B[432] +  A[28]*B[433] +  A[29]*B[434] +  A[30]*B[435] +  A[31]*B[436] +  A[32]*B[437] +  A[33]*B[438] +  A[34]*B[439] +  A[35]*B[440] +  A[36]*B[441] +  A[37]*B[442] +  A[38]*B[443] +  A[39]*B[444] +  A[40]*B[445] +  A[41]*B[446] +  A[42]*B[447] +  A[43]*B[448] +  A[44]*B[449] +  A[45]*B[450] +  A[46]*B[451] +  A[47]*B[452] +  A[48]*B[453] +  A[49]*B[454] +  A[50]*B[455] +  A[51]*B[456] +  A[52]*B[457] +  A[53]*B[458] +  A[54]*B[459] +  A[55]*B[460] +  A[56]*B[461] +  A[57]*B[462] +  A[58]*B[463] +  A[59]*B[464] +  A[60]*B[465] +  A[61]*B[466] +  A[62]*B[467] +  A[63]*B[468] +  A[64]*B[469] +  A[65]*B[470] +  A[66]*B[471] +  A[67]*B[472] +  A[68]*B[473] +  A[69]*B[474] +  A[70]*B[475] +  A[71]*B[476] +  A[72]*B[477] +  A[73]*B[478] +  A[74]*B[479] +  A[75]*B[480] +  A[76]*B[481] +  A[77]*B[482] +  A[78]*B[483] +  A[79]*B[484] +  A[80]*B[485];
        Matrix[6]  =  A[0]*B[486] +  A[1]*B[487] +  A[2]*B[488] +  A[3]*B[489] +  A[4]*B[490] +  A[5]*B[491] +  A[6]*B[492] +  A[7]*B[493] +  A[8]*B[494] +  A[9]*B[495] +  A[10]*B[496] +  A[11]*B[497] +  A[12]*B[498] +  A[13]*B[499] +  A[14]*B[500] +  A[15]*B[501] +  A[16]*B[502] +  A[17]*B[503] +  A[18]*B[504] +  A[19]*B[505] +  A[20]*B[506] +  A[21]*B[507] +  A[22]*B[508] +  A[23]*B[509] +  A[24]*B[510] +  A[25]*B[511] +  A[26]*B[512] +  A[27]*B[513] +  A[28]*B[514] +  A[29]*B[515] +  A[30]*B[516] +  A[31]*B[517] +  A[32]*B[518] +  A[33]*B[519] +  A[34]*B[520] +  A[35]*B[521] +  A[36]*B[522] +  A[37]*B[523] +  A[38]*B[524] +  A[39]*B[525] +  A[40]*B[526] +  A[41]*B[527] +  A[42]*B[528] +  A[43]*B[529] +  A[44]*B[530] +  A[45]*B[531] +  A[46]*B[532] +  A[47]*B[533] +  A[48]*B[534] +  A[49]*B[535] +  A[50]*B[536] +  A[51]*B[537] +  A[52]*B[538] +  A[53]*B[539] +  A[54]*B[540] +  A[55]*B[541] +  A[56]*B[542] +  A[57]*B[543] +  A[58]*B[544] +  A[59]*B[545] +  A[60]*B[546] +  A[61]*B[547] +  A[62]*B[548] +  A[63]*B[549] +  A[64]*B[550] +  A[65]*B[551] +  A[66]*B[552] +  A[67]*B[553] +  A[68]*B[554] +  A[69]*B[555] +  A[70]*B[556] +  A[71]*B[557] +  A[72]*B[558] +  A[73]*B[559] +  A[74]*B[560] +  A[75]*B[561] +  A[76]*B[562] +  A[77]*B[563] +  A[78]*B[564] +  A[79]*B[565] +  A[80]*B[566];
        Matrix[7]  =  A[0]*B[567] +  A[1]*B[568] +  A[2]*B[569] +  A[3]*B[570] +  A[4]*B[571] +  A[5]*B[572] +  A[6]*B[573] +  A[7]*B[574] +  A[8]*B[575] +  A[9]*B[576] +  A[10]*B[577] +  A[11]*B[578] +  A[12]*B[579] +  A[13]*B[580] +  A[14]*B[581] +  A[15]*B[582] +  A[16]*B[583] +  A[17]*B[584] +  A[18]*B[585] +  A[19]*B[586] +  A[20]*B[587] +  A[21]*B[588] +  A[22]*B[589] +  A[23]*B[590] +  A[24]*B[591] +  A[25]*B[592] +  A[26]*B[593] +  A[27]*B[594] +  A[28]*B[595] +  A[29]*B[596] +  A[30]*B[597] +  A[31]*B[598] +  A[32]*B[599] +  A[33]*B[600] +  A[34]*B[601] +  A[35]*B[602] +  A[36]*B[603] +  A[37]*B[604] +  A[38]*B[605] +  A[39]*B[606] +  A[40]*B[607] +  A[41]*B[608] +  A[42]*B[609] +  A[43]*B[610] +  A[44]*B[611] +  A[45]*B[612] +  A[46]*B[613] +  A[47]*B[614] +  A[48]*B[615] +  A[49]*B[616] +  A[50]*B[617] +  A[51]*B[618] +  A[52]*B[619] +  A[53]*B[620] +  A[54]*B[621] +  A[55]*B[622] +  A[56]*B[623] +  A[57]*B[624] +  A[58]*B[625] +  A[59]*B[626] +  A[60]*B[627] +  A[61]*B[628] +  A[62]*B[629] +  A[63]*B[630] +  A[64]*B[631] +  A[65]*B[632] +  A[66]*B[633] +  A[67]*B[634] +  A[68]*B[635] +  A[69]*B[636] +  A[70]*B[637] +  A[71]*B[638] +  A[72]*B[639] +  A[73]*B[640] +  A[74]*B[641] +  A[75]*B[642] +  A[76]*B[643] +  A[77]*B[644] +  A[78]*B[645] +  A[79]*B[646] +  A[80]*B[647];
        Matrix[8]  =  A[0]*B[648] +  A[1]*B[649] +  A[2]*B[650] +  A[3]*B[651] +  A[4]*B[652] +  A[5]*B[653] +  A[6]*B[654] +  A[7]*B[655] +  A[8]*B[656] +  A[9]*B[657] +  A[10]*B[658] +  A[11]*B[659] +  A[12]*B[660] +  A[13]*B[661] +  A[14]*B[662] +  A[15]*B[663] +  A[16]*B[664] +  A[17]*B[665] +  A[18]*B[666] +  A[19]*B[667] +  A[20]*B[668] +  A[21]*B[669] +  A[22]*B[670] +  A[23]*B[671] +  A[24]*B[672] +  A[25]*B[673] +  A[26]*B[674] +  A[27]*B[675] +  A[28]*B[676] +  A[29]*B[677] +  A[30]*B[678] +  A[31]*B[679] +  A[32]*B[680] +  A[33]*B[681] +  A[34]*B[682] +  A[35]*B[683] +  A[36]*B[684] +  A[37]*B[685] +  A[38]*B[686] +  A[39]*B[687] +  A[40]*B[688] +  A[41]*B[689] +  A[42]*B[690] +  A[43]*B[691] +  A[44]*B[692] +  A[45]*B[693] +  A[46]*B[694] +  A[47]*B[695] +  A[48]*B[696] +  A[49]*B[697] +  A[50]*B[698] +  A[51]*B[699] +  A[52]*B[700] +  A[53]*B[701] +  A[54]*B[702] +  A[55]*B[703] +  A[56]*B[704] +  A[57]*B[705] +  A[58]*B[706] +  A[59]*B[707] +  A[60]*B[708] +  A[61]*B[709] +  A[62]*B[710] +  A[63]*B[711] +  A[64]*B[712] +  A[65]*B[713] +  A[66]*B[714] +  A[67]*B[715] +  A[68]*B[716] +  A[69]*B[717] +  A[70]*B[718] +  A[71]*B[719] +  A[72]*B[720] +  A[73]*B[721] +  A[74]*B[722] +  A[75]*B[723] +  A[76]*B[724] +  A[77]*B[725] +  A[78]*B[726] +  A[79]*B[727] +  A[80]*B[728];
    }
}

























