#pragma once /*Avoids redefinition of matfunctions in the translation unit*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iIjJ  =  Id_ij*Id_IJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_ijII(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[5]   =  1.;
       C[10]  =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[10]  =  1.;
       C[20]  =  1.;
       C[30]  =  1.;
       C[40]  =  1.;
       C[50]  =  1.;
       C[60]  =  1.;
       C[70]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iIjJ  =  Id_iI*Id_jJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_iIjJ(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[3]   =  1.;
       C[12]  =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[4]   =  1.;
       C[8]   =  1.;
       C[36]  =  1.;
       C[40]  =  1.;
       C[44]  =  1.;
       C[72]  =  1.;
       C[76]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Fourth order identity matrix I_iJiJ  =  Id_iJ*Id_jI
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void FourthOrderIdentity_iJjI(mwSize dim, double *C) 
{
    for (mwSize i=0; i<dim*dim*dim*dim; i++){
       C[i]  =  0.;   
    }
    if (dim==2){
       C[0]   =  1.;
       C[6]   =  1.;
       C[9]   =  1.;
       C[15]  =  1.;
    }
    else if (dim==3){
       C[0]   =  1.;
       C[12]  =  1.;
       C[24]  =  1.;
       C[28]  =  1.;
       C[40]  =  1.;
       C[52]  =  1.;
       C[56]  =  1.;
       C[68]  =  1.;
       C[80]  =  1.;
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between fourth order identity matrix and a second 
 * order tensor:  C_iIjJ  =  Id_{ij}Id_{pP}*Fqp*E_jpq*E_JPQ        
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_IdentityMatrix_42_(mwSize dim, const double *F, double *C) 
{
  C[4]  =   F[8];
  C[5]  =   -F[7];
  C[7]  =   -F[5];
  C[8]  =   F[4];
  C[12] =  -F[8];
  C[14] =  F[6];
  C[15] =  F[5];
  C[17] =  -F[3];
  C[21] =  F[7];
  C[22] =  -F[6];
  C[24] =  -F[4];
  C[25] =  F[3];
  C[28] =  -F[8];
  C[29] =  F[7];
  C[34] =  F[2];
  C[35] =  -F[1];
  C[36] =  F[8];
  C[38] =  -F[6];
  C[42] =  -F[2];
  C[44] =  F[0];
  C[45] =  -F[7];
  C[46] =  F[6];
  C[51] =  F[1];
  C[52] =  -F[0];
  C[55] =  F[5];
  C[56] =  -F[4];
  C[58] =  -F[2];
  C[59] =  F[1];
  C[63] =  -F[5];
  C[65] =  F[3];
  C[66] =  F[2];
  C[68] =  -F[0];
  C[72] =  F[4];
  C[73] =  -F[3];
  C[75] =  -F[1];
  C[76] =  F[0];
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between two vectors:
 * C_IJ  =  A_I*B_J     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_11_(mwSize dim, const double *A, const double *B, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[0]*B[1];
       C[3]   =  A[1]*B[1];
    }
    else if (dim==3){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[0]*B[1];
       C[4]   =  A[1]*B[1];
       C[5]   =  A[2]*B[1];
       C[6]   =  A[0]*B[2];
       C[7]   =  A[1]*B[2];
       C[8]   =  A[2]*B[2];    
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between two second order tensors:
 * C_iIjJ  =  A_iI*B_jJ     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_22_(mwSize dim, const double *A, const double *B, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[3]*B[0];
       C[4]   =  A[0]*B[1];
       C[5]   =  A[1]*B[1];
       C[6]   =  A[2]*B[1];
       C[7]   =  A[3]*B[1];
       C[8]   =  A[0]*B[2];
       C[9]   =  A[1]*B[2];
       C[10]  =  A[2]*B[2];
       C[11]  =  A[3]*B[2];
       C[12]  =  A[0]*B[3];
       C[13]  =  A[1]*B[3];
       C[14]  =  A[2]*B[3];
       C[15]  =  A[3]*B[3];      
    }
    else if (dim==3){
       C[0]   =  A[0]*B[0];
       C[1]   =  A[1]*B[0];
       C[2]   =  A[2]*B[0];
       C[3]   =  A[3]*B[0];
       C[4]   =  A[4]*B[0];
       C[5]   =  A[5]*B[0];
       C[6]   =  A[6]*B[0];
       C[7]   =  A[7]*B[0];
       C[8]   =  A[8]*B[0];
       C[9]   =  A[0]*B[1];
       C[10]  =  A[1]*B[1];
       C[11]  =  A[2]*B[1];
       C[12]  =  A[3]*B[1];
       C[13]  =  A[4]*B[1];
       C[14]  =  A[5]*B[1];
       C[15]  =  A[6]*B[1];
       C[16]  =  A[7]*B[1];
       C[17]  =  A[8]*B[1];
       C[18]  =  A[0]*B[2];
       C[19]  =  A[1]*B[2];
       C[20]  =  A[2]*B[2];
       C[21]  =  A[3]*B[2];
       C[22]  =  A[4]*B[2];
       C[23]  =  A[5]*B[2];
       C[24]  =  A[6]*B[2];
       C[25]  =  A[7]*B[2];
       C[26]  =  A[8]*B[2];
       C[27]  =  A[0]*B[3];
       C[28]  =  A[1]*B[3];
       C[29]  =  A[2]*B[3];
       C[30]  =  A[3]*B[3];
       C[31]  =  A[4]*B[3];
       C[32]  =  A[5]*B[3];
       C[33]  =  A[6]*B[3];
       C[34]  =  A[7]*B[3];
       C[35]  =  A[8]*B[3];
       C[36]  =  A[0]*B[4];
       C[37]  =  A[1]*B[4];
       C[38]  =  A[2]*B[4];
       C[39]  =  A[3]*B[4];
       C[40]  =  A[4]*B[4];
       C[41]  =  A[5]*B[4];
       C[42]  =  A[6]*B[4];
       C[43]  =  A[7]*B[4];
       C[44]  =  A[8]*B[4];
       C[45]  =  A[0]*B[5];
       C[46]  =  A[1]*B[5];
       C[47]  =  A[2]*B[5];
       C[48]  =  A[3]*B[5];
       C[49]  =  A[4]*B[5];
       C[50]  =  A[5]*B[5];
       C[51]  =  A[6]*B[5];
       C[52]  =  A[7]*B[5];
       C[53]  =  A[8]*B[5];
       C[54]  =  A[0]*B[6];
       C[55]  =  A[1]*B[6];
       C[56]  =  A[2]*B[6];
       C[57]  =  A[3]*B[6];
       C[58]  =  A[4]*B[6];
       C[59]  =  A[5]*B[6];
       C[60]  =  A[6]*B[6];
       C[61]  =  A[7]*B[6];
       C[62]  =  A[8]*B[6];
       C[63]  =  A[0]*B[7];
       C[64]  =  A[1]*B[7];
       C[65]  =  A[2]*B[7];
       C[66]  =  A[3]*B[7];
       C[67]  =  A[4]*B[7];
       C[68]  =  A[5]*B[7];
       C[69]  =  A[6]*B[7];
       C[70]  =  A[7]*B[7];
       C[71]  =  A[8]*B[7];
       C[72]  =  A[0]*B[8];
       C[73]  =  A[1]*B[8];
       C[74]  =  A[2]*B[8];
       C[75]  =  A[3]*B[8];
       C[76]  =  A[4]*B[8];
       C[77]  =  A[5]*B[8];
       C[78]  =  A[6]*B[8];
       C[79]  =  A[7]*B[8];
       C[80]  =  A[8]*B[8];   
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between fourth order tensor and second order tensor
 * C_iIjJ  =  E_jpq*E_JPQ*H_iIpP*B_qQ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_42_(mwSize dim, const double *H, const double *B, double *C) 
{
  C[0]   =  B[8]*H[36] - B[7]*H[45] - B[5]*H[63] + B[4]*H[72];
  C[1]   =  B[8]*H[37] - B[7]*H[46] - B[5]*H[64] + B[4]*H[73];
  C[2]   =  B[8]*H[38] - B[7]*H[47] - B[5]*H[65] + B[4]*H[74];
  C[3]   =  B[8]*H[39] - B[7]*H[48] - B[5]*H[66] + B[4]*H[75];
  C[4]   =  B[8]*H[40] - B[7]*H[49] - B[5]*H[67] + B[4]*H[76];
  C[5]   =  B[8]*H[41] - B[7]*H[50] - B[5]*H[68] + B[4]*H[77];
  C[6]   =  B[8]*H[42] - B[7]*H[51] - B[5]*H[69] + B[4]*H[78];
  C[7]   =  B[8]*H[43] - B[7]*H[52] - B[5]*H[70] + B[4]*H[79];
  C[8]   =  B[8]*H[44] - B[7]*H[53] - B[5]*H[71] + B[4]*H[80];
  C[9]   =  B[6]*H[45] - B[8]*H[27] + B[5]*H[54] - B[3]*H[72];
  C[10]  =  B[6]*H[46] - B[8]*H[28] + B[5]*H[55] - B[3]*H[73];
  C[11]  =  B[6]*H[47] - B[8]*H[29] + B[5]*H[56] - B[3]*H[74];
  C[12]  =  B[6]*H[48] - B[8]*H[30] + B[5]*H[57] - B[3]*H[75];
  C[13]  =  B[6]*H[49] - B[8]*H[31] + B[5]*H[58] - B[3]*H[76];
  C[14]  =  B[6]*H[50] - B[8]*H[32] + B[5]*H[59] - B[3]*H[77];
  C[15]  =  B[6]*H[51] - B[8]*H[33] + B[5]*H[60] - B[3]*H[78];
  C[16]  =  B[6]*H[52] - B[8]*H[34] + B[5]*H[61] - B[3]*H[79];
  C[17]  =  B[6]*H[53] - B[8]*H[35] + B[5]*H[62] - B[3]*H[80];
  C[18]  =  B[7]*H[27] - B[6]*H[36] - B[4]*H[54] + B[3]*H[63];
  C[19]  =  B[7]*H[28] - B[6]*H[37] - B[4]*H[55] + B[3]*H[64];
  C[20]  =  B[7]*H[29] - B[6]*H[38] - B[4]*H[56] + B[3]*H[65];
  C[21]  =  B[7]*H[30] - B[6]*H[39] - B[4]*H[57] + B[3]*H[66];
  C[22]  =  B[7]*H[31] - B[6]*H[40] - B[4]*H[58] + B[3]*H[67];
  C[23]  =  B[7]*H[32] - B[6]*H[41] - B[4]*H[59] + B[3]*H[68];
  C[24]  =  B[7]*H[33] - B[6]*H[42] - B[4]*H[60] + B[3]*H[69];
  C[25]  =  B[7]*H[34] - B[6]*H[43] - B[4]*H[61] + B[3]*H[70];
  C[26]  =  B[7]*H[35] - B[6]*H[44] - B[4]*H[62] + B[3]*H[71];
  C[27]  =  B[7]*H[18] - B[8]*H[9]  + B[2]*H[63] - B[1]*H[72];
  C[28]  =  B[7]*H[19] - B[8]*H[10] + B[2]*H[64] - B[1]*H[73];
  C[29]  =  B[7]*H[20] - B[8]*H[11] + B[2]*H[65] - B[1]*H[74];
  C[30]  =  B[7]*H[21] - B[8]*H[12] + B[2]*H[66] - B[1]*H[75];
  C[31]  =  B[7]*H[22] - B[8]*H[13] + B[2]*H[67] - B[1]*H[76];
  C[32]  =  B[7]*H[23] - B[8]*H[14] + B[2]*H[68] - B[1]*H[77];
  C[33]  =  B[7]*H[24] - B[8]*H[15] + B[2]*H[69] - B[1]*H[78];
  C[34]  =  B[7]*H[25] - B[8]*H[16] + B[2]*H[70] - B[1]*H[79];
  C[35]  =  B[7]*H[26] - B[8]*H[17] + B[2]*H[71] - B[1]*H[80];
  C[36]  =  B[8]*H[0]  - B[6]*H[18] - B[2]*H[54] + B[0]*H[72];
  C[37]  =  B[8]*H[1]  - B[6]*H[19] - B[2]*H[55] + B[0]*H[73];
  C[38]  =  B[8]*H[2]  - B[6]*H[20] - B[2]*H[56] + B[0]*H[74];
  C[39]  =  B[8]*H[3]  - B[6]*H[21] - B[2]*H[57] + B[0]*H[75];
  C[40]  =  B[8]*H[4]  - B[6]*H[22] - B[2]*H[58] + B[0]*H[76];
  C[41]  =  B[8]*H[5]  - B[6]*H[23] - B[2]*H[59] + B[0]*H[77];
  C[42]  =  B[8]*H[6]  - B[6]*H[24] - B[2]*H[60] + B[0]*H[78];
  C[43]  =  B[8]*H[7]  - B[6]*H[25] - B[2]*H[61] + B[0]*H[79];
  C[44]  =  B[8]*H[8]  - B[6]*H[26] - B[2]*H[62] + B[0]*H[80];
  C[45]  =  B[6]*H[9]  - B[7]*H[0]  + B[1]*H[54] - B[0]*H[63];
  C[46]  =  B[6]*H[10] - B[7]*H[1]  + B[1]*H[55] - B[0]*H[64];
  C[47]  =  B[6]*H[11] - B[7]*H[2]  + B[1]*H[56] - B[0]*H[65];
  C[48]  =  B[6]*H[12] - B[7]*H[3]  + B[1]*H[57] - B[0]*H[66];
  C[49]  =  B[6]*H[13] - B[7]*H[4]  + B[1]*H[58] - B[0]*H[67];
  C[50]  =  B[6]*H[14] - B[7]*H[5]  + B[1]*H[59] - B[0]*H[68];
  C[51]  =  B[6]*H[15] - B[7]*H[6]  + B[1]*H[60] - B[0]*H[69];
  C[52]  =  B[6]*H[16] - B[7]*H[7]  + B[1]*H[61] - B[0]*H[70];
  C[53]  =  B[6]*H[17] - B[7]*H[8]  + B[1]*H[62] - B[0]*H[71];
  C[54]  =  B[5]*H[9]  - B[4]*H[18] - B[2]*H[36] + B[1]*H[45];
  C[55]  =  B[5]*H[10] - B[4]*H[19] - B[2]*H[37] + B[1]*H[46];
  C[56]  =  B[5]*H[11] - B[4]*H[20] - B[2]*H[38] + B[1]*H[47];
  C[57]  =  B[5]*H[12] - B[4]*H[21] - B[2]*H[39] + B[1]*H[48];
  C[58]  =  B[5]*H[13] - B[4]*H[22] - B[2]*H[40] + B[1]*H[49];
  C[59]  =  B[5]*H[14] - B[4]*H[23] - B[2]*H[41] + B[1]*H[50];
  C[60]  =  B[5]*H[15] - B[4]*H[24] - B[2]*H[42] + B[1]*H[51];
  C[61]  =  B[5]*H[16] - B[4]*H[25] - B[2]*H[43] + B[1]*H[52];
  C[62]  =  B[5]*H[17] - B[4]*H[26] - B[2]*H[44] + B[1]*H[53];
  C[63]  =  B[3]*H[18] - B[5]*H[0]  + B[2]*H[27] - B[0]*H[45];
  C[64]  =  B[3]*H[19] - B[5]*H[1]  + B[2]*H[28] - B[0]*H[46];
  C[65]  =  B[3]*H[20] - B[5]*H[2]  + B[2]*H[29] - B[0]*H[47];
  C[66]  =  B[3]*H[21] - B[5]*H[3]  + B[2]*H[30] - B[0]*H[48];
  C[67]  =  B[3]*H[22] - B[5]*H[4]  + B[2]*H[31] - B[0]*H[49];
  C[68]  =  B[3]*H[23] - B[5]*H[5]  + B[2]*H[32] - B[0]*H[50];
  C[69]  =  B[3]*H[24] - B[5]*H[6]  + B[2]*H[33] - B[0]*H[51];
  C[70]  =  B[3]*H[25] - B[5]*H[7]  + B[2]*H[34] - B[0]*H[52];
  C[71]  =  B[3]*H[26] - B[5]*H[8]  + B[2]*H[35] - B[0]*H[53];
  C[72]  =  B[4]*H[0]  - B[3]*H[9]  - B[1]*H[27] + B[0]*H[36];
  C[73]  =  B[4]*H[1]  - B[3]*H[10] - B[1]*H[28] + B[0]*H[37];
  C[74]  =  B[4]*H[2]  - B[3]*H[11] - B[1]*H[29] + B[0]*H[38];
  C[75]  =  B[4]*H[3]  - B[3]*H[12] - B[1]*H[30] + B[0]*H[39];
  C[76]  =  B[4]*H[4]  - B[3]*H[13] - B[1]*H[31] + B[0]*H[40];
  C[77]  =  B[4]*H[5]  - B[3]*H[14] - B[1]*H[32] + B[0]*H[41];
  C[78]  =  B[4]*H[6]  - B[3]*H[15] - B[1]*H[33] + B[0]*H[42];
  C[79]  =  B[4]*H[7]  - B[3]*H[16] - B[1]*H[34] + B[0]*H[43];
  C[80]  =  B[4]*H[8]  - B[3]*H[17] - B[1]*H[35] + B[0]*H[44]; 
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Cross product between second order tensor and fourth order tensor
 * C_iIjJ  =  E_ipq*E_IPQ*B_pP*H_qQjJ
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Cross_24_(mwSize dim, const double *H, const double *B, double *C) 
{
C[0]   =   B[4]*H[8]  - B[5]*H[7] - B[7]*H[5] + B[8]*H[4];
C[1]   =   B[5]*H[6]  - B[3]*H[8] + B[6]*H[5] - B[8]*H[3];
C[2]   =   B[3]*H[7]  - B[4]*H[6] - B[6]*H[4] + B[7]*H[3];
C[3]   =   B[2]*H[7]  - B[1]*H[8] + B[7]*H[2] - B[8]*H[1];
C[4]   =   B[0]*H[8]  - B[2]*H[6] - B[6]*H[2] + B[8]*H[0];
C[5]   =   B[1]*H[6]  - B[0]*H[7] + B[6]*H[1] - B[7]*H[0];
C[6]   =   B[1]*H[5]  - B[2]*H[4] - B[4]*H[2] + B[5]*H[1];
C[7]   =   B[2]*H[3]  - B[0]*H[5] + B[3]*H[2] - B[5]*H[0];
C[8]   =   B[0]*H[4]  - B[1]*H[3] - B[3]*H[1] + B[4]*H[0];
C[9]   =   B[4]*H[17] - B[5]*H[16] - B[7]*H[14] + B[8]*H[13];
C[10]  =   B[5]*H[15] - B[3]*H[17] + B[6]*H[14] - B[8]*H[12];
C[11]  =   B[3]*H[16] - B[4]*H[15] - B[6]*H[13] + B[7]*H[12];
C[12]  =   B[2]*H[16] - B[1]*H[17] + B[7]*H[11] - B[8]*H[10];
C[13]  =   B[0]*H[17] - B[2]*H[15] - B[6]*H[11] + B[8]*H[9];
C[14]  =   B[1]*H[15] - B[0]*H[16] + B[6]*H[10] - B[7]*H[9];
C[15]  =   B[1]*H[14] - B[2]*H[13] - B[4]*H[11] + B[5]*H[10];
C[16]  =   B[2]*H[12] - B[0]*H[14] + B[3]*H[11] - B[5]*H[9];
C[17]  =   B[0]*H[13] - B[1]*H[12] - B[3]*H[10] + B[4]*H[9];
C[18]  =   B[4]*H[26] - B[5]*H[25] - B[7]*H[23] + B[8]*H[22];
C[19]  =   B[5]*H[24] - B[3]*H[26] + B[6]*H[23] - B[8]*H[21];
C[20]  =   B[3]*H[25] - B[4]*H[24] - B[6]*H[22] + B[7]*H[21];
C[21]  =   B[2]*H[25] - B[1]*H[26] + B[7]*H[20] - B[8]*H[19];
C[22]  =   B[0]*H[26] - B[2]*H[24] - B[6]*H[20] + B[8]*H[18];
C[23]  =   B[1]*H[24] - B[0]*H[25] + B[6]*H[19] - B[7]*H[18];
C[24]  =   B[1]*H[23] - B[2]*H[22] - B[4]*H[20] + B[5]*H[19];
C[25]  =   B[2]*H[21] - B[0]*H[23] + B[3]*H[20] - B[5]*H[18];
C[26]  =   B[0]*H[22] - B[1]*H[21] - B[3]*H[19] + B[4]*H[18];
C[27]  =   B[4]*H[35] - B[5]*H[34] - B[7]*H[32] + B[8]*H[31];
C[28]  =   B[5]*H[33] - B[3]*H[35] + B[6]*H[32] - B[8]*H[30];
C[29]  =   B[3]*H[34] - B[4]*H[33] - B[6]*H[31] + B[7]*H[30];
C[30]  =   B[2]*H[34] - B[1]*H[35] + B[7]*H[29] - B[8]*H[28];
C[31]  =   B[0]*H[35] - B[2]*H[33] - B[6]*H[29] + B[8]*H[27];
C[32]  =   B[1]*H[33] - B[0]*H[34] + B[6]*H[28] - B[7]*H[27];
C[33]  =   B[1]*H[32] - B[2]*H[31] - B[4]*H[29] + B[5]*H[28];
C[34]  =   B[2]*H[30] - B[0]*H[32] + B[3]*H[29] - B[5]*H[27];
C[35]  =   B[0]*H[31] - B[1]*H[30] - B[3]*H[28] + B[4]*H[27];
C[36]  =   B[4]*H[44] - B[5]*H[43] - B[7]*H[41] + B[8]*H[40];
C[37]  =   B[5]*H[42] - B[3]*H[44] + B[6]*H[41] - B[8]*H[39];
C[38]  =   B[3]*H[43] - B[4]*H[42] - B[6]*H[40] + B[7]*H[39];
C[39]  =   B[2]*H[43] - B[1]*H[44] + B[7]*H[38] - B[8]*H[37];
C[40]  =   B[0]*H[44] - B[2]*H[42] - B[6]*H[38] + B[8]*H[36];
C[41]  =   B[1]*H[42] - B[0]*H[43] + B[6]*H[37] - B[7]*H[36];
C[42]  =   B[1]*H[41] - B[2]*H[40] - B[4]*H[38] + B[5]*H[37];
C[43]  =   B[2]*H[39] - B[0]*H[41] + B[3]*H[38] - B[5]*H[36];
C[44]  =   B[0]*H[40] - B[1]*H[39] - B[3]*H[37] + B[4]*H[36];
C[45]  =   B[4]*H[53] - B[5]*H[52] - B[7]*H[50] + B[8]*H[49];
C[46]  =   B[5]*H[51] - B[3]*H[53] + B[6]*H[50] - B[8]*H[48];
C[47]  =   B[3]*H[52] - B[4]*H[51] - B[6]*H[49] + B[7]*H[48];
C[48]  =   B[2]*H[52] - B[1]*H[53] + B[7]*H[47] - B[8]*H[46];
C[49]  =   B[0]*H[53] - B[2]*H[51] - B[6]*H[47] + B[8]*H[45];
C[50]  =   B[1]*H[51] - B[0]*H[52] + B[6]*H[46] - B[7]*H[45];
C[51]  =   B[1]*H[50] - B[2]*H[49] - B[4]*H[47] + B[5]*H[46];
C[52]  =   B[2]*H[48] - B[0]*H[50] + B[3]*H[47] - B[5]*H[45];
C[53]  =   B[0]*H[49] - B[1]*H[48] - B[3]*H[46] + B[4]*H[45];
C[54]  =   B[4]*H[62] - B[5]*H[61] - B[7]*H[59] + B[8]*H[58];
C[55]  =   B[5]*H[60] - B[3]*H[62] + B[6]*H[59] - B[8]*H[57];
C[56]  =   B[3]*H[61] - B[4]*H[60] - B[6]*H[58] + B[7]*H[57];
C[57]  =   B[2]*H[61] - B[1]*H[62] + B[7]*H[56] - B[8]*H[55];
C[58]  =   B[0]*H[62] - B[2]*H[60] - B[6]*H[56] + B[8]*H[54];
C[59]  =   B[1]*H[60] - B[0]*H[61] + B[6]*H[55] - B[7]*H[54];
C[60]  =   B[1]*H[59] - B[2]*H[58] - B[4]*H[56] + B[5]*H[55];
C[61]  =   B[2]*H[57] - B[0]*H[59] + B[3]*H[56] - B[5]*H[54];
C[62]  =   B[0]*H[58] - B[1]*H[57] - B[3]*H[55] + B[4]*H[54];
C[63]  =   B[4]*H[71] - B[5]*H[70] - B[7]*H[68] + B[8]*H[67];
C[64]  =   B[5]*H[69] - B[3]*H[71] + B[6]*H[68] - B[8]*H[66];
C[65]  =   B[3]*H[70] - B[4]*H[69] - B[6]*H[67] + B[7]*H[66];
C[66]  =   B[2]*H[70] - B[1]*H[71] + B[7]*H[65] - B[8]*H[64];
C[67]  =   B[0]*H[71] - B[2]*H[69] - B[6]*H[65] + B[8]*H[63];
C[68]  =   B[1]*H[69] - B[0]*H[70] + B[6]*H[64] - B[7]*H[63];
C[69]  =   B[1]*H[68] - B[2]*H[67] - B[4]*H[65] + B[5]*H[64];
C[70]  =   B[2]*H[66] - B[0]*H[68] + B[3]*H[65] - B[5]*H[63];
C[71]  =   B[0]*H[67] - B[1]*H[66] - B[3]*H[64] + B[4]*H[63];
C[72]  =   B[4]*H[80] - B[5]*H[79] - B[7]*H[77] + B[8]*H[76];
C[73]  =   B[5]*H[78] - B[3]*H[80] + B[6]*H[77] - B[8]*H[75];
C[74]  =   B[3]*H[79] - B[4]*H[78] - B[6]*H[76] + B[7]*H[75];
C[75]  =   B[2]*H[79] - B[1]*H[80] + B[7]*H[74] - B[8]*H[73];
C[76]  =   B[0]*H[80] - B[2]*H[78] - B[6]*H[74] + B[8]*H[72];
C[77]  =   B[1]*H[78] - B[0]*H[79] + B[6]*H[73] - B[7]*H[72];
C[78]  =   B[1]*H[77] - B[2]*H[76] - B[4]*H[74] + B[5]*H[73];
C[79]  =   B[2]*H[75] - B[0]*H[77] + B[3]*H[74] - B[5]*H[72];
C[80]  =   B[0]*H[76] - B[1]*H[75] - B[3]*H[73] + B[4]*H[72];
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between third order tensor and a vector:
 * C_iIjJ  =  D_iIj*V_J     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_31_iIjJ_(mwSize dim, const double *D, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[3]*V[0];
       C[4]   =  D[4]*V[0];
       C[5]   =  D[5]*V[0];
       C[6]   =  D[6]*V[0];
       C[7]   =  D[7]*V[0];
       C[8]   =  D[0]*V[1];
       C[9]   =  D[1]*V[1];
       C[10]  =  D[2]*V[1];
       C[11]  =  D[3]*V[1];
       C[12]  =  D[4]*V[1];
       C[13]  =  D[5]*V[1];
       C[14]  =  D[6]*V[1];
       C[15]  =  D[7]*V[1];       
    }
    else if (dim==3){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[3]*V[0];
       C[4]   =  D[4]*V[0];
       C[5]   =  D[5]*V[0];
       C[6]   =  D[6]*V[0];
       C[7]   =  D[7]*V[0];
       C[8]   =  D[8]*V[0];
       C[9]   =  D[9]*V[0];
       C[10]  =  D[10]*V[0];
       C[11]  =  D[11]*V[0];
       C[12]  =  D[12]*V[0];
       C[13]  =  D[13]*V[0];
       C[14]  =  D[14]*V[0];
       C[15]  =  D[15]*V[0];
       C[16]  =  D[16]*V[0];
       C[17]  =  D[17]*V[0];
       C[18]  =  D[18]*V[0];
       C[19]  =  D[19]*V[0];
       C[20]  =  D[20]*V[0];
       C[21]  =  D[21]*V[0];
       C[22]  =  D[22]*V[0];
       C[23]  =  D[23]*V[0];
       C[24]  =  D[24]*V[0];
       C[25]  =  D[25]*V[0];
       C[26]  =  D[26]*V[0];
       C[27]  =  D[0]*V[1];
       C[28]  =  D[1]*V[1];
       C[29]  =  D[2]*V[1];
       C[30]  =  D[3]*V[1];
       C[31]  =  D[4]*V[1];
       C[32]  =  D[5]*V[1];
       C[33]  =  D[6]*V[1];
       C[34]  =  D[7]*V[1];
       C[35]  =  D[8]*V[1];
       C[36]  =  D[9]*V[1];
       C[37]  =  D[10]*V[1];
       C[38]  =  D[11]*V[1];
       C[39]  =  D[12]*V[1];
       C[40]  =  D[13]*V[1];
       C[41]  =  D[14]*V[1];
       C[42]  =  D[15]*V[1];
       C[43]  =  D[16]*V[1];
       C[44]  =  D[17]*V[1];
       C[45]  =  D[18]*V[1];
       C[46]  =  D[19]*V[1];
       C[47]  =  D[20]*V[1];
       C[48]  =  D[21]*V[1];
       C[49]  =  D[22]*V[1];
       C[50]  =  D[23]*V[1];
       C[51]  =  D[24]*V[1];
       C[52]  =  D[25]*V[1];
       C[53]  =  D[26]*V[1];
       C[54]  =  D[0]*V[2];
       C[55]  =  D[1]*V[2];
       C[56]  =  D[2]*V[2];
       C[57]  =  D[3]*V[2];
       C[58]  =  D[4]*V[2];
       C[59]  =  D[5]*V[2];
       C[60]  =  D[6]*V[2];
       C[61]  =  D[7]*V[2];
       C[62]  =  D[8]*V[2];
       C[63]  =  D[9]*V[2];
       C[64]  =  D[10]*V[2];
       C[65]  =  D[11]*V[2];
       C[66]  =  D[12]*V[2];
       C[67]  =  D[13]*V[2];
       C[68]  =  D[14]*V[2];
       C[69]  =  D[15]*V[2];
       C[70]  =  D[16]*V[2];
       C[71]  =  D[17]*V[2];
       C[72]  =  D[18]*V[2];
       C[73]  =  D[19]*V[2];
       C[74]  =  D[20]*V[2];
       C[75]  =  D[21]*V[2];
       C[76]  =  D[22]*V[2];
       C[77]  =  D[23]*V[2];
       C[78]  =  D[24]*V[2];
       C[79]  =  D[25]*V[2];
       C[80]  =  D[26]*V[2];
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between third order tensor and a vector:
 * C_iIjJ  =  D_ijJ*V_I     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_31_ijJI_(mwSize dim, const double *D, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[0]*V[1];
       C[3]   =  D[1]*V[1];
       C[4]   =  D[2]*V[0];
       C[5]   =  D[3]*V[0];
       C[6]   =  D[2]*V[1];
       C[7]   =  D[3]*V[1];
       C[8]   =  D[4]*V[0];
       C[9]   =  D[5]*V[0];
       C[10]  =  D[4]*V[1];
       C[11]  =  D[5]*V[1];
       C[12]  =  D[6]*V[0];
       C[13]  =  D[7]*V[0];
       C[14]  =  D[6]*V[1];
       C[15]  =  D[7]*V[1];
     }
    else if (dim==3){
       C[0]   =  D[0]*V[0];
       C[1]   =  D[1]*V[0];
       C[2]   =  D[2]*V[0];
       C[3]   =  D[0]*V[1];
       C[4]   =  D[1]*V[1];
       C[5]   =  D[2]*V[1];
       C[6]   =  D[0]*V[2];
       C[7]   =  D[1]*V[2];
       C[8]   =  D[2]*V[2];
       C[9]   =  D[3]*V[0];
       C[10]  =  D[4]*V[0];
       C[11]  =  D[5]*V[0];
       C[12]  =  D[3]*V[1];
       C[13]  =  D[4]*V[1];
       C[14]  =  D[5]*V[1];
       C[15]  =  D[3]*V[2];
       C[16]  =  D[4]*V[2];
       C[17]  =  D[5]*V[2];
       C[18]  =  D[6]*V[0];
       C[19]  =  D[7]*V[0];
       C[20]  =  D[8]*V[0];
       C[21]  =  D[6]*V[1];
       C[22]  =  D[7]*V[1];
       C[23]  =  D[8]*V[1];
       C[24]  =  D[6]*V[2];
       C[25]  =  D[7]*V[2];
       C[26]  =  D[8]*V[2];
       C[27]  =  D[9]*V[0];
       C[28]  =  D[10]*V[0];
       C[29]  =  D[11]*V[0];
       C[30]  =  D[9]*V[1];
       C[31]  =  D[10]*V[1];
       C[32]  =  D[11]*V[1];
       C[33]  =  D[9]*V[2];
       C[34]  =  D[10]*V[2];
       C[35]  =  D[11]*V[2];
       C[36]  =  D[12]*V[0];
       C[37]  =  D[13]*V[0];
       C[38]  =  D[14]*V[0];
       C[39]  =  D[12]*V[1];
       C[40]  =  D[13]*V[1];
       C[41]  =  D[14]*V[1];
       C[42]  =  D[12]*V[2];
       C[43]  =  D[13]*V[2];
       C[44]  =  D[14]*V[2];
       C[45]  =  D[15]*V[0];
       C[46]  =  D[16]*V[0];
       C[47]  =  D[17]*V[0];
       C[48]  =  D[15]*V[1];
       C[49]  =  D[16]*V[1];
       C[50]  =  D[17]*V[1];
       C[51]  =  D[15]*V[2];
       C[52]  =  D[16]*V[2];
       C[53]  =  D[17]*V[2];
       C[54]  =  D[18]*V[0];
       C[55]  =  D[19]*V[0];
       C[56]  =  D[20]*V[0];
       C[57]  =  D[18]*V[1];
       C[58]  =  D[19]*V[1];
       C[59]  =  D[20]*V[1];
       C[60]  =  D[18]*V[2];
       C[61]  =  D[19]*V[2];
       C[62]  =  D[20]*V[2];
       C[63]  =  D[21]*V[0];
       C[64]  =  D[22]*V[0];
       C[65]  =  D[23]*V[0];
       C[66]  =  D[21]*V[1];
       C[67]  =  D[22]*V[1];
       C[68]  =  D[23]*V[1];
       C[69]  =  D[21]*V[2];
       C[70]  =  D[22]*V[2];
       C[71]  =  D[23]*V[2];
       C[72]  =  D[24]*V[0];
       C[73]  =  D[25]*V[0];
       C[74]  =  D[26]*V[0];
       C[75]  =  D[24]*V[1];
       C[76]  =  D[25]*V[1];
       C[77]  =  D[26]*V[1];
       C[78]  =  D[24]*V[2];
       C[79]  =  D[25]*V[2];
       C[80]  =  D[26]*V[2];
    }
}
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/* Outer product between a second order tensor and two vectors
 * C_iIjJ  =  U_I*V_J*A_ij     
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
void Outer_211_ijIJ_(mwSize dim, const double *A, const double *U, const double *V, double *C) 
{ 
    if (dim==2){
       C[0]   =  A[0]*U[0]*V[0];
       C[1]   =  A[1]*U[0]*V[0];
       C[2]   =  A[0]*U[1]*V[0];
       C[3]   =  A[1]*U[1]*V[0];
       C[4]   =  A[2]*U[0]*V[0];
       C[5]   =  A[3]*U[0]*V[0];
       C[6]   =  A[2]*U[1]*V[0];
       C[7]   =  A[3]*U[1]*V[0];
       C[8]   =  A[0]*U[0]*V[1];
       C[9]   =  A[1]*U[0]*V[1];
       C[10]  =  A[0]*U[1]*V[1];
       C[11]  =  A[1]*U[1]*V[1];
       C[12]  =  A[2]*U[0]*V[1];
       C[13]  =  A[3]*U[0]*V[1];
       C[14]  =  A[2]*U[1]*V[1];
       C[15]  =  A[3]*U[1]*V[1];
    }
    else if (dim==3){
       C[0]   =  A[0]*U[0]*V[0];
       C[1]   =  A[1]*U[0]*V[0];
       C[2]   =  A[2]*U[0]*V[0];
       C[3]   =  A[0]*U[1]*V[0];
       C[4]   =  A[1]*U[1]*V[0];
       C[5]   =  A[2]*U[1]*V[0];
       C[6]   =  A[0]*U[2]*V[0];
       C[7]   =  A[1]*U[2]*V[0];
       C[8]   =  A[2]*U[2]*V[0];
       C[9]   =  A[3]*U[0]*V[0];
       C[10]  =  A[4]*U[0]*V[0];
       C[11]  =  A[5]*U[0]*V[0];
       C[12]  =  A[3]*U[1]*V[0];
       C[13]  =  A[4]*U[1]*V[0];
       C[14]  =  A[5]*U[1]*V[0];
       C[15]  =  A[3]*U[2]*V[0];
       C[16]  =  A[4]*U[2]*V[0];
       C[17]  =  A[5]*U[2]*V[0];
       C[18]  =  A[6]*U[0]*V[0];
       C[19]  =  A[7]*U[0]*V[0];
       C[20]  =  A[8]*U[0]*V[0];
       C[21]  =  A[6]*U[1]*V[0];
       C[22]  =  A[7]*U[1]*V[0];
       C[23]  =  A[8]*U[1]*V[0];
       C[24]  =  A[6]*U[2]*V[0];
       C[25]  =  A[7]*U[2]*V[0];
       C[26]  =  A[8]*U[2]*V[0];
       C[27]  =  A[0]*U[0]*V[1];
       C[28]  =  A[1]*U[0]*V[1];
       C[29]  =  A[2]*U[0]*V[1];
       C[30]  =  A[0]*U[1]*V[1];
       C[31]  =  A[1]*U[1]*V[1];
       C[32]  =  A[2]*U[1]*V[1];
       C[33]  =  A[0]*U[2]*V[1];
       C[34]  =  A[1]*U[2]*V[1];
       C[35]  =  A[2]*U[2]*V[1];
       C[36]  =  A[3]*U[0]*V[1];
       C[37]  =  A[4]*U[0]*V[1];
       C[38]  =  A[5]*U[0]*V[1];
       C[39]  =  A[3]*U[1]*V[1];
       C[40]  =  A[4]*U[1]*V[1];
       C[41]  =  A[5]*U[1]*V[1];
       C[42]  =  A[3]*U[2]*V[1];
       C[43]  =  A[4]*U[2]*V[1];
       C[44]  =  A[5]*U[2]*V[1];
       C[45]  =  A[6]*U[0]*V[1];
       C[46]  =  A[7]*U[0]*V[1];
       C[47]  =  A[8]*U[0]*V[1];
       C[48]  =  A[6]*U[1]*V[1];
       C[49]  =  A[7]*U[1]*V[1];
       C[50]  =  A[8]*U[1]*V[1];
       C[51]  =  A[6]*U[2]*V[1];
       C[52]  =  A[7]*U[2]*V[1];
       C[53]  =  A[8]*U[2]*V[1];
       C[54]  =  A[0]*U[0]*V[2];
       C[55]  =  A[1]*U[0]*V[2];
       C[56]  =  A[2]*U[0]*V[2];
       C[57]  =  A[0]*U[1]*V[2];
       C[58]  =  A[1]*U[1]*V[2];
       C[59]  =  A[2]*U[1]*V[2];
       C[60]  =  A[0]*U[2]*V[2];
       C[61]  =  A[1]*U[2]*V[2];
       C[62]  =  A[2]*U[2]*V[2];
       C[63]  =  A[3]*U[0]*V[2];
       C[64]  =  A[4]*U[0]*V[2];
       C[65]  =  A[5]*U[0]*V[2];
       C[66]  =  A[3]*U[1]*V[2];
       C[67]  =  A[4]*U[1]*V[2];
       C[68]  =  A[5]*U[1]*V[2];
       C[69]  =  A[3]*U[2]*V[2];
       C[70]  =  A[4]*U[2]*V[2];
       C[71]  =  A[5]*U[2]*V[2];
       C[72]  =  A[6]*U[0]*V[2];
       C[73]  =  A[7]*U[0]*V[2];
       C[74]  =  A[8]*U[0]*V[2];
       C[75]  =  A[6]*U[1]*V[2];
       C[76]  =  A[7]*U[1]*V[2];
       C[77]  =  A[8]*U[1]*V[2];
       C[78]  =  A[6]*U[2]*V[2];
       C[79]  =  A[7]*U[2]*V[2];
       C[80]  =  A[8]*U[2]*V[2];
    }
}














