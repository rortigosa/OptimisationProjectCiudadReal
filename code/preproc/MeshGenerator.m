%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%
% Mesh generators
%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

function [nodes,...
    connectivity]        =  MeshGenerator(degree,geometry,continuity)

switch geometry.type
    case 'Structured_Triad_Rectangle'    
         [nodes,...
          connectivity]  =  StructuredTriadRectangleMeshGenerator(degree,geometry.Lx,...
                                                                          geometry.Ly,...
                                                                          geometry.Nx,...
                                                                          geometry.Ny);                                                                      
    case 'Structured_Quad_Rectangle'    
         [nodes,...
          connectivity]  =  StructuredQuadRectangleMeshGenerator(degree,geometry.Lx,...
                                                                         geometry.Ly,...
                                                                         geometry.Nx,...
                                                                         geometry.Ny);
    case 'Structured_Quad_Rectangle_Inverted'    
         [nodes,...
          connectivity]  =  StructuredQuadRectangleInvertedMeshGenerator(degree,geometry.Lx,...
                                                                         geometry.Ly,...
                                                                         geometry.Nx,...
                                                                         geometry.Ny);
    case 'Structured_Hexa'    
         [nodes,...
          connectivity]  =  StructuredHexaMeshGenerator(degree,geometry.Lx,...
                                                        geometry.Ly,geometry.Lz,...
                                                        geometry.Nx,geometry.Ny,...
                                                        geometry.Nz);
    case 'Structured_Tet_Prism'
         [nodes,...
          connectivity]  =  StructuredTetPrismMeshGenerator(degree,geometry.Lx,...
                                                                    geometry.Ly,...
                                                                    geometry.Lz,...
                                                                    geometry.Nx,...
                                                                    geometry.Ny,...
                                                                    geometry.Nz);        
    case 'Structured_Hexa_Prism'
         [nodes,...
          connectivity]  =  StructuredHexaPrismMeshGenerator(degree,geometry.Lx,...
                                                                     geometry.Ly,...
                                                                     geometry.Lz,...
                                                                     geometry.Nx,...
                                                                     geometry.Ny,...
                                                                     geometry.Nz);        
    case 'Structured_Quad_Circle'
         [nodes,...
          connectivity]  =  StructuredQuadCircleMeshGenerator(degree,geometry.r,...
                                                                      geometry.Nr,...
                                                                      geometry.Ntheta);        
    otherwise
         [nodes,...
          connectivity]  =  MeshReadingFile;
end        
%--------------------------------------------------------------------------        
% Include discontinuous meshing if prescribed
%--------------------------------------------------------------------------        
switch continuity
    case 'continuous'         
    case 'discontinuous'
         [nodes,connectivity]   =  DiscontinuousMeshing(nodes,connectivity);
end

