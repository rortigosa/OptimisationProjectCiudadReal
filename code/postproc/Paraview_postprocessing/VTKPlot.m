function VTKPlot(filename,dataType,varargin)
% VTKWRITE Writes 3D Matlab array into VTK file format.
%  vtkwrite(filename,'structured_grid',x,y,z,'vectors',title,u,v,w) writes
%  a structured 3D vector data into VTK file, with name specified by the string
%  filename. (u,v,w) are the vector components at the points (x,y,z). x,y,z
%  should be 3-D matrices like those generated by meshgrid, where
%  point(ijk) is specified by x(i,j,k), y(i,j,k) and z(i,j,k).
%  The matrices x,y,z,u,v,w must all be the same size and contain
%  corrresponding position and vector component. The string title specifies
%  the name of the vector field to be saved. 
%
%  vtkwrite(filename,'structured_grid',x,y,z,'scalars',title,r) writes a 3D
%  scalar data into VTK file whose name is specified by the string
%  filename. r is the scalar value at the points (x,y,z). The matrices
%  x,y,z,r must all be the same size and contain the corresponding position
%  and scalar values. 
%
%  vtkwrite(filename,'structured_grid',x,y,z,'vectors',title1,u,v,w,'scalars',
%  title2,r) writes a 3D structured grid that contains both vector and scalar values.
%  x,y,z,u,v,w,r must all be the same size and contain the corresponding
%  positon, vector and scalar values.
%
%  vtkwrite(filename,'unstructured_grid',x,y,z,'vectors',title1,u,v,w,'scalars',
%  title2,r) writes a 3D unstructured grid that contains both vector and scalar values.
%  x,y,z,u,v,w,r must all be the same size and contain the corresponding
%  positon, vector and scalar values.
%  
%  vtkwrite(filename,'polydata','lines',x,y,z) exports a 3D line where
%  x,y,z are coordinates of the points that make the line. x,y,z are
%  vectors containing the coordinates of points of the line, where point(n)
%  is specified by x(n),y(n) and z(n).
%
%  vtkwrite(filename,'polydata','lines',x,y,z,'Precision',n) allows you to
%  specify precision of the exported number up to n digits after decimal
%  point. Default precision is 3 digits. 
%
%  vtkwrite(filename,'polydata','triangle',x,y,z,tri) exports a list of
%  triangles where x,y,z are the coordinates of the points and tri is an
%  m*3 matrix whose rows denote the points of the individual triangles.
%
%  vtkwrite(filename,'polydata','tetrahedron',x,y,z,tetra) exports a list
%  of tetrahedrons where x,y,z are the coordinates of the points
%  and tetra is an m*4 matrix whose rows denote the points of individual
%  tetrahedrons. 
%  
%  vtkwrite('execute','polydata','lines',x,y,z) will save data with default
%  filename ''matlab_export.vtk' and automatically loads data into
%  ParaView. 
%  
%  Version 2.2.1
%  Chaoyuan Yeh, 2015
%  Codes are modified from William Thielicke and David Gingras's submission.    

if strcmpi(filename,'execute'), filename = 'matlab_export.vtk'; end
fid = fopen(filename, 'w'); 
% VTK files contain five major parts
% 1. VTK DataFile Version
fprintf(fid, '# vtk DataFile Version 2.0\n');
% 2. Title
fprintf(fid, 'VTK from Matlab\n');
fprintf(fid, 'ASCII\n');
%--------------------------------------------------------------------------
% Preprocess
%--------------------------------------------------------------------------
data.dim         = numel(varargin{1})/length(varargin{1});
data.nodes       = length(varargin{1});
data.elem        = size(varargin{2},1);
data.nperelement = size(varargin{2},2);

if data.dim == 2 && data.nperelement == 3,  data.shape = '1-triangular';   verb1 = '%0.3f %0.3f\n'; verb2 = '%d %d %d %d\n'; b = 5;  end
if data.dim == 2 && data.nperelement == 4,  data.shape = '1-quadrilateral';verb1 = '%0.3f %0.3f\n'; verb2 = '%d %d %d %d %d\n'; b = 9;  end
if data.dim == 2 && data.nperelement == 6,  data.shape = '2-triangular';   verb1 = '%0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d\n'; b = 22; end
if data.dim == 2 && data.nperelement == 8,  data.shape = '2-quadrilateral';verb1 = '%0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d %d %d\n'; b = 23; end
if data.dim == 3 && data.nperelement == 4,  data.shape = '1-tetrahedron';  verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d\n'; b = 10; end
if data.dim == 3 && data.nperelement == 8,  data.shape = '1-hexahedron';   verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d %d %d\n'; b = 12; end
if data.dim == 3 && data.nperelement == 4,  data.shape = '1-quadrilateral';verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d\n'; b = 9;  end
if data.dim == 3 && data.nperelement == 10, data.shape = '2-tetrahedron';  verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d %d %d %d %d\n'; b = 24; end
if data.dim == 3 && data.nperelement == 20, data.shape = '2-hexahedron';   verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n'; b = 25; end
if data.dim == 3 && data.nperelement == 27, data.shape = '2bi-hexahedron';   verb1 = '%0.3f %0.3f %0.3f\n'; verb2 = '%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d  %d  %d  %d  %d  %d  %d  %d\n'; b = 28; end
%--------------------------------------------------------------------------
% Mesh type 
%--------------------------------------------------------------------------
fprintf(fid, '\nDATASET UNSTRUCTURED_GRID\n');
%--------------------------------------------------------------------------
% Write the coordinates of the nodes
%--------------------------------------------------------------------------
fprintf(fid, ['POINTS ' num2str(data.nodes) ' float\n']);
fprintf(fid,verb1,varargin{1}');
%--------------------------------------------------------------------------
% Write type of element and connectivity
%--------------------------------------------------------------------------
fprintf(fid, ['\nCELLS ' num2str(data.elem) ' ' num2str(data.elem*(data.nperelement+1)) '\n']);
fprintf(fid,verb2,[data.nperelement*ones(data.elem,1),varargin{2}-1]');

fprintf(fid, ['\nCELL_TYPES ' num2str(data.elem) '\n']);
fprintf(fid,'%d\n',b*ones(data.elem,1)');
%--------------------------------------------------------------------------
% Write the data at every node, either if it is scalar or vector
%--------------------------------------------------------------------------
fprintf(fid, ['\nPOINT_DATA ' num2str(data.nodes)]);
vidx = find(strcmpi(varargin,'VECTORS'));
sidx = find(strcmpi(varargin,'SCALARS'));
if vidx~=0
    for ii = 1:length(vidx)
        title = varargin{vidx(ii)+1};
        % Data enteries begin with a keyword specifying data type
        % and numeric format.
        fprintf(fid, ['\nVECTORS ', title,' float\n']);
        fwrite(fid, [reshape(varargin{vidx(ii)+2},1,n_points);...
        reshape(varargin{vidx(ii)+3},1,n_points);...
        reshape(varargin{vidx(ii)+4},1,n_points)],'float','b');
    end
end
if sidx~=0
    for ii = 1:length(sidx)
        title = varargin{sidx(ii)+1};
        fprintf(fid, ['\nSCALARS ', title,' float\n']);
        fprintf(fid, 'LOOKUP_TABLE default\n');
        val = varargin{sidx(ii)+2};
        fprintf(fid,'%0.4f\n',val);
    end
end

fclose(fid);
if strcmpi(filename,'matlab_export.vtk')
    switch computer
        case {'PCWIN','PCWIN64'}
            !paraview.exe --data='matlab_export.vtk' &
            % Exclamation point character is a shell escape, the rest of the
            % input line will be sent to operating system. It can not take
            % variables, though. The & at the end of line will return control to 
            % Matlab even when the outside process is still running. 
        case {'GLNXA64','MACI64'}
            !paraview --data='matlab_export.vtk' &
    end
end
end